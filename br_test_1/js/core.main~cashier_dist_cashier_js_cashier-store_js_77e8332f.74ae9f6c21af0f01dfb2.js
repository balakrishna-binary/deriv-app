/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["main~cashier_dist_cashier_js_cashier-store_js_77e8332f"],{

/***/ "../../cashier/dist/cashier/js/cashier-store.js":
/*!******************************************************!*\
  !*** ../../cashier/dist/cashier/js/cashier-store.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/components */ \"../../components/src/index.js\"), __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.js\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! mobx */ \"../../../node_modules/mobx/lib/mobx.module.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"));\n\telse {}\n})(self, function(__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_mobx__, __WEBPACK_EXTERNAL_MODULE_react__) {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Stores/Cashier/cashier-store.js\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* binding */ CashierStore)\\n});\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n// EXTERNAL MODULE: external \\\"mobx\\\"\\nvar external_mobx_ = __webpack_require__(\\\"mobx\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/shared\\\"\\nvar shared_ = __webpack_require__(\\\"@deriv/shared\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/translations\\\"\\nvar translations_ = __webpack_require__(\\\"@deriv/translations\\\");\\n;// CONCATENATED MODULE: ./Config/on-ramp-providers.js\\n\\n\\nvar createBanxaProvider = function createBanxaProvider(store) {\\n  return {\\n    icon: {\\n      dark: 'IcCashierBanxaDark',\\n      light: 'IcCashierBanxaLight'\\n    },\\n    name: 'Banxa',\\n    getDescription: function getDescription() {\\n      return (0,translations_.localize)('A fast and secure fiat-to-crypto payment service. Deposit cryptocurrencies from anywhere in the world using your credit/debit cards and bank transfers.');\\n    },\\n    getAllowedResidencies: function getAllowedResidencies() {\\n      return ['*'];\\n    },\\n    getPaymentIcons: function getPaymentIcons() {\\n      return [{\\n        dark: 'IcCashierVisaDark',\\n        light: 'IcCashierVisaLight'\\n      }, {\\n        dark: 'IcCashierMastercardDark',\\n        light: 'IcCashierMastercardLight'\\n      }, {\\n        dark: 'IcCashierBpayDark',\\n        light: 'IcCashierBpayLight'\\n      }, {\\n        dark: 'IcCashierSepaDark',\\n        light: 'IcCashierSepaLight'\\n      }, {\\n        dark: 'IcCashierBlueshyftDark',\\n        light: 'IcCashierBlueshyftLight'\\n      }, {\\n        dark: 'IcCashierFlexepinDark',\\n        light: 'IcCashierFlexepinLight'\\n      }, {\\n        dark: 'IcCashierPayIdDark',\\n        light: 'IcCashierPayIdLight'\\n      }, {\\n        dark: 'IcCashierPoliDark',\\n        light: 'IcCashierPoliLight'\\n      }, {\\n        dark: 'IcCashierApplePay',\\n        light: 'IcCashierApplePay'\\n      }, {\\n        dark: 'IcCashierInteracEtransfer',\\n        light: 'IcCashierInteracEtransfer'\\n      }, {\\n        dark: 'IcCashierIdeal',\\n        light: 'IcCashierIdeal'\\n      }, {\\n        dark: 'IcCashierPostBillPayDark',\\n        light: 'IcCashierPostBillPayLight'\\n      }, {\\n        dark: 'IcCashierSofort',\\n        light: 'IcCashierSofort'\\n      }];\\n    },\\n    getScriptDependencies: function getScriptDependencies() {\\n      return [];\\n    },\\n    // None.\\n    getDefaultFromCurrency: function getDefaultFromCurrency() {\\n      return '';\\n    },\\n    getFromCurrencies: function getFromCurrencies() {\\n      return ['*'];\\n    },\\n    getToCurrencies: function getToCurrencies() {\\n      return ['*'];\\n    },\\n    getWidgetHtml: function getWidgetHtml() {\\n      return new Promise(function (resolve, reject) {\\n        store.WS.serviceToken({\\n          service_token: 1,\\n          service: 'banxa',\\n          referrer: window.location.href\\n        }).then(function (response) {\\n          if (response.error) {\\n            reject(response.error.message);\\n          } else {\\n            var url = response.service_token.banxa.url;\\n\\n            if (url) {\\n              window.open(url);\\n            } // Resolving empty will/should redirect user.\\n\\n\\n            resolve();\\n          }\\n        });\\n      });\\n    },\\n    onMountWidgetContainer: function onMountWidgetContainer() {},\\n    should_show_deposit_address: false\\n  };\\n};\\n\\nvar createChangellyProvider = function createChangellyProvider(store) {\\n  return {\\n    icon: {\\n      dark: 'IcCashierChangellyDark',\\n      light: 'IcCashierChangellyLight'\\n    },\\n    name: 'Changelly',\\n    getDescription: function getDescription() {\\n      return (0,translations_.localize)('Your simple access to crypto. Fast and secure way to exchange and purchase cryptocurrencies. 24/7 live chat support.');\\n    },\\n    getAllowedResidencies: function getAllowedResidencies() {\\n      return ['*'];\\n    },\\n    getPaymentIcons: function getPaymentIcons() {\\n      return [{\\n        dark: 'IcCashierVisaDark',\\n        light: 'IcCashierVisaLight'\\n      }, {\\n        dark: 'IcCashierMastercardDark',\\n        light: 'IcCashierMastercardLight'\\n      }];\\n    },\\n    getScriptDependencies: function getScriptDependencies() {\\n      return [];\\n    },\\n    getDefaultFromCurrency: function getDefaultFromCurrency() {\\n      return 'usd';\\n    },\\n    getFromCurrencies: function getFromCurrencies() {\\n      return ['usd', 'eur', 'gbp'];\\n    },\\n    getToCurrencies: function getToCurrencies() {\\n      return ['bch', 'btc', 'etc', 'eth', 'ltc', 'ust'];\\n    },\\n    getWidgetHtml: function getWidgetHtml() {\\n      var _this = this;\\n\\n      return new Promise(function (resolve) {\\n        var url = new URL('https://widget.changelly.com/?v=3&theme=default');\\n        url.searchParams.append('fromDefault', _this.getDefaultFromCurrency());\\n        var currency = store.root_store.client.currency.toLowerCase();\\n\\n        if (_this.getToCurrencies().includes(currency)) {\\n          var to_currency = currency === 'ust' ? 'usdt' : currency;\\n          url.searchParams.append('to', to_currency);\\n          url.searchParams.append('toDefault', to_currency);\\n        }\\n\\n        url.searchParams.append('amount', 1);\\n        url.searchParams.append('merchant_id', 'iiq3jdt2p44yrfbx');\\n        window.open(url);\\n        resolve();\\n      });\\n    },\\n    onMountWidgetContainer: function onMountWidgetContainer() {},\\n    should_show_deposit_address: true\\n  };\\n};\\n\\nvar createXanPoolProvider = function createXanPoolProvider(store) {\\n  return {\\n    icon: {\\n      dark: 'IcCashierXanpoolDark',\\n      light: 'IcCashierXanpoolLight'\\n    },\\n    name: 'XanPool',\\n    getDescription: function getDescription() {\\n      return (0,translations_.localize)('Buy cryptocurrencies in an instant. Enjoy easy, quick, and secure exchanges using your local payment methods.');\\n    },\\n    getAllowedResidencies: function getAllowedResidencies() {\\n      return ['*'];\\n    },\\n    getPaymentIcons: function getPaymentIcons() {\\n      return [{\\n        dark: 'IcCashierFpsDark',\\n        light: 'IcCashierFpsLight'\\n      }, {\\n        dark: 'IcCashierAliPayDark',\\n        light: 'IcCashierAliPayLight'\\n      }, {\\n        dark: 'IcCashierGoPayDark',\\n        light: 'IcCashierGoPayLight'\\n      }, {\\n        dark: 'IcCashierMandiriPay',\\n        light: 'IcCashierMandiriPay'\\n      }, {\\n        dark: 'IcCashierInstaPayLight',\\n        light: 'IcCashierInstaPayDark'\\n      }, {\\n        dark: 'IcCashierCebuanaLhuillierDark',\\n        light: 'IcCashierCebuanaLhuillierLight'\\n      }, {\\n        dark: 'IcCashierPayNowDark',\\n        light: 'IcCashierPayNowLight'\\n      }, {\\n        dark: 'IcCashierUpiDark',\\n        light: 'IcCashierUpiLight'\\n      }, {\\n        dark: 'IcCashierPromptPayDark',\\n        light: 'IcCashierPromptPayLight'\\n      }, {\\n        dark: 'IcCashierViettlePay',\\n        light: 'IcCashierViettlePay'\\n      }];\\n    },\\n    getScriptDependencies: function getScriptDependencies() {\\n      return [];\\n    },\\n    getToCurrencies: function getToCurrencies() {\\n      return ['btc', 'eth', 'ust', 'zil', 'nem'];\\n    },\\n    getWidgetHtml: function getWidgetHtml() {\\n      return new Promise(function (resolve) {\\n        var currency = store.root_store.client.currency;\\n        var url = 'https://checkout.xanpool.com/';\\n        url += \\\"?apiKey=db4ec638dff9a68abda1ef6b7638c220\\\";\\n        url += \\\"&redirectUrl=\\\".concat(window.location.href);\\n        url += \\\"&wallet=\\\".concat(store.deposit_address);\\n        url += \\\"&cryptoCurrency=\\\".concat(currency === 'UST' ? 'USDT' : currency);\\n        url += \\\"&transactionType=buy\\\";\\n        window.open(url);\\n        resolve();\\n      });\\n    },\\n    onMountWidgetContainer: function onMountWidgetContainer() {},\\n    should_show_deposit_address: false\\n  };\\n};\\n\\n/* harmony default export */ const on_ramp_providers = ({\\n  createBanxaProvider: createBanxaProvider,\\n  createChangellyProvider: createChangellyProvider,\\n  createXanPoolProvider: createXanPoolProvider\\n});\\n;// CONCATENATED MODULE: ./_common/utility.js\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n\\n\\nvar template = function template(string, content) {\\n  var to_replace = content;\\n\\n  if (content && !Array.isArray(content)) {\\n    to_replace = [content];\\n  }\\n\\n  return string.replace(/\\\\[_(\\\\d+)]/g, function (s, index) {\\n    return to_replace[+index - 1];\\n  });\\n};\\n/**\\n * Creates a DOM element and adds any attributes to it.\\n *\\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\\n * @return the created DOM element\\n */\\n\\n\\nvar createElement = function createElement(tag_name) {\\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n  var el = document.createElement(tag_name);\\n  Object.keys(attributes).forEach(function (attr) {\\n    var value = attributes[attr];\\n\\n    if (attr === 'text') {\\n      el.textContent = value;\\n    } else if (attr === 'html') {\\n      el.html(value);\\n    } else {\\n      el.setAttribute(attr, value);\\n    }\\n  });\\n  return el;\\n};\\n\\nvar static_hash;\\n\\nvar getStaticHash = function getStaticHash() {\\n  static_hash = static_hash || (document.querySelector('script[src*=\\\"main\\\"]').getAttribute('src') || '').split('.')[1];\\n  return static_hash;\\n};\\n\\nvar PromiseClass = function PromiseClass() {\\n  var _this = this;\\n\\n  _classCallCheck(this, PromiseClass);\\n\\n  this.promise = new Promise(function (resolve, reject) {\\n    _this.reject = reject;\\n    _this.resolve = resolve;\\n  });\\n};\\n\\nvar copyToClipboard = function copyToClipboard(text) {\\n  var textField = document.createElement('textarea');\\n  textField.innerText = text;\\n  document.body.appendChild(textField);\\n  textField.select();\\n  document.execCommand('copy');\\n  textField.remove();\\n}; // eu countries to support\\n\\n\\nvar eu_countries = (/* unused pure expression or super */ null && (['it', 'de', 'fr', 'lu', 'gr', 'mf', 'es', 'sk', 'lt', 'nl', 'at', 'bg', 'si', 'cy', 'be', 'ro', 'hr', 'pt', 'pl', 'lv', 'ee', 'cz', 'fi', 'hu', 'dk', 'se', 'ie', 'im', 'gb', 'mt'])); // check if client is from EU\\n\\nvar isEuCountry = function isEuCountry(country) {\\n  return eu_countries.includes(country);\\n}; // check if mlt or dxtrade for account text\\n\\n\\nvar getAccountText = function getAccountText(account) {\\n  var account_text = '';\\n\\n  if (account.is_dxtrade || account.is_mt) {\\n    account_text = account.text;\\n  } else {\\n    account_text = getCurrencyName(account.text);\\n  }\\n\\n  return account_text;\\n};\\n\\n\\n;// CONCATENATED MODULE: ./Utils/Validator/errors.js\\nfunction errors_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nvar Errors = /*#__PURE__*/function () {\\n  function Errors() {\\n    errors_classCallCheck(this, Errors);\\n\\n    this.errors = {};\\n  }\\n\\n  _createClass(Errors, [{\\n    key: \\\"add\\\",\\n    value: function add(attribute, message) {\\n      if (!this.has(attribute)) {\\n        this.errors[attribute] = [];\\n      }\\n\\n      if (this.errors[attribute].indexOf(message) === -1) {\\n        this.errors[attribute].push(message);\\n      }\\n    }\\n  }, {\\n    key: \\\"all\\\",\\n    value: function all() {\\n      return this.errors;\\n    }\\n  }, {\\n    key: \\\"first\\\",\\n    value: function first(attribute) {\\n      if (this.has(attribute)) {\\n        return this.errors[attribute][0];\\n      }\\n\\n      return null;\\n    }\\n  }, {\\n    key: \\\"get\\\",\\n    value: function get(attribute) {\\n      if (this.has(attribute)) {\\n        return this.errors[attribute];\\n      }\\n\\n      return [];\\n    }\\n  }, {\\n    key: \\\"has\\\",\\n    value: function has(attribute) {\\n      return Object.prototype.hasOwnProperty.call(this.errors, attribute);\\n    }\\n  }]);\\n\\n  return Errors;\\n}();\\n\\n/* harmony default export */ const errors = (Errors);\\n;// CONCATENATED MODULE: ./Utils/Validator/validator.js\\nfunction validator_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction validator_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction validator_createClass(Constructor, protoProps, staticProps) { if (protoProps) validator_defineProperties(Constructor.prototype, protoProps); if (staticProps) validator_defineProperties(Constructor, staticProps); return Constructor; }\\n\\n\\n\\n\\n\\nvar Validator = /*#__PURE__*/function () {\\n  function Validator(input, rules) {\\n    var store = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\\n\\n    validator_classCallCheck(this, Validator);\\n\\n    this.input = input;\\n    this.rules = rules;\\n    this.store = store;\\n    this.errors = new errors();\\n    this.error_count = 0;\\n  }\\n  /**\\n   * Add failure and error message for given rule\\n   *\\n   * @param {string} attribute\\n   * @param {object} rule\\n   */\\n\\n\\n  validator_createClass(Validator, [{\\n    key: \\\"addFailure\\\",\\n    value: function addFailure(attribute, rule, error_message) {\\n      var message = error_message || rule.options.message || (0,shared_.getPreBuildDVRs)()[rule.name].message();\\n\\n      if (rule.name === 'length') {\\n        message = template(message, [rule.options.min === rule.options.max ? rule.options.min : \\\"\\\".concat(rule.options.min, \\\"-\\\").concat(rule.options.max)]);\\n      } else if (rule.name === 'min') {\\n        message = template(message, [rule.options.min]);\\n      } else if (rule.name === 'not_equal') {\\n        message = template(message, [rule.options.name1, rule.options.name2]);\\n      }\\n\\n      this.errors.add(attribute, message);\\n      this.error_count++;\\n    }\\n    /**\\n     * Runs validator\\n     *\\n     * @return {boolean} Whether it passes; true = passes, false = fails\\n     */\\n\\n  }, {\\n    key: \\\"check\\\",\\n    value: function check() {\\n      var _this = this;\\n\\n      Object.keys(this.input).forEach(function (attribute) {\\n        if (!Object.prototype.hasOwnProperty.call(_this.rules, attribute)) {\\n          return;\\n        }\\n\\n        _this.rules[attribute].forEach(function (rule) {\\n          var ruleObject = Validator.getRuleObject(rule);\\n\\n          if (!ruleObject.validator && typeof ruleObject.validator !== 'function') {\\n            return;\\n          }\\n\\n          if (ruleObject.options.condition && !ruleObject.options.condition(_this.store)) {\\n            return;\\n          }\\n\\n          if (_this.input[attribute] === '' && ruleObject.name !== 'req') {\\n            return;\\n          }\\n\\n          var is_valid, error_message;\\n\\n          if (ruleObject.name === 'number') {\\n            var _ruleObject$validator = ruleObject.validator(_this.input[attribute], ruleObject.options, _this.store, _this.input),\\n                is_ok = _ruleObject$validator.is_ok,\\n                message = _ruleObject$validator.message;\\n\\n            is_valid = is_ok;\\n            error_message = message;\\n          } else {\\n            is_valid = ruleObject.validator(_this.input[attribute], ruleObject.options, _this.store, _this.input);\\n          }\\n\\n          if (!is_valid) {\\n            _this.addFailure(attribute, ruleObject, error_message);\\n          }\\n        });\\n      });\\n      return !this.error_count;\\n    }\\n    /**\\n     * Determine if validation passes\\n     *\\n     * @return {boolean}\\n     */\\n\\n  }, {\\n    key: \\\"isPassed\\\",\\n    value: function isPassed() {\\n      return this.check();\\n    }\\n    /**\\n     * Converts the rule array to an object\\n     *\\n     * @param {array} rule\\n     * @return {object}\\n     */\\n\\n  }], [{\\n    key: \\\"getRuleObject\\\",\\n    value: function getRuleObject(rule) {\\n      var is_rule_string = typeof rule === 'string';\\n      var rule_object = {\\n        name: is_rule_string ? rule : rule[0],\\n        options: is_rule_string ? {} : rule[1] || {}\\n      };\\n      rule_object.validator = rule_object.name === 'custom' ? rule[1].func : (0,shared_.getPreBuildDVRs)()[rule_object.name].func;\\n      return rule_object;\\n    }\\n  }]);\\n\\n  return Validator;\\n}();\\n\\n/* harmony default export */ const Validator_validator = (Validator);\\n;// CONCATENATED MODULE: ./Utils/Validator/index.js\\n\\n\\n;// CONCATENATED MODULE: ./Stores/base-store.js\\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _descriptor, _descriptor2, _descriptor3, _class2, _temp;\\n\\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction base_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction base_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction base_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) base_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) base_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n/**\\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\\n *  1. Creating snapshot object from the store.\\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\\n */\\n\\nvar BaseStore = (_dec = external_mobx_.action.bound, _dec2 = external_mobx_.action.bound, _dec3 = external_mobx_.action.bound, _dec4 = external_mobx_.action.bound, _dec5 = external_mobx_.action.bound, _dec6 = external_mobx_.action.bound, _dec7 = external_mobx_.action.bound, _dec8 = external_mobx_.action.bound, _dec9 = external_mobx_.action.bound, _dec10 = external_mobx_.action.bound, _dec11 = external_mobx_.action.bound, _dec12 = external_mobx_.action.bound, _dec13 = external_mobx_.action.bound, _dec14 = external_mobx_.action.bound, _dec15 = external_mobx_.action.bound, _dec16 = external_mobx_.action.bound, (_class = (_temp = _class2 = /*#__PURE__*/function () {\\n  /**\\n   * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\\n   */\\n\\n  /**\\n   * Constructor of the base class that gets properties' name of child which should be saved in storages\\n   *\\n   * @param {Object} options - An object that contains the following properties:\\n   *     @property {Object}   root_store - An object that contains the root store of the app.\\n   *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\\n   *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\\n   *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\\n   *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\\n   */\\n  function BaseStore() {\\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n\\n    base_store_classCallCheck(this, BaseStore);\\n\\n    _initializerDefineProperty(this, \\\"validation_errors\\\", _descriptor, this);\\n\\n    _initializerDefineProperty(this, \\\"validation_rules\\\", _descriptor2, this);\\n\\n    this.preSwitchAccountDisposer = null;\\n    this.pre_switch_account_listener = null;\\n    this.switchAccountDisposer = null;\\n    this.switch_account_listener = null;\\n    this.logoutDisposer = null;\\n    this.logout_listener = null;\\n    this.clientInitDisposer = null;\\n    this.client_init_listener = null;\\n    this.networkStatusChangeDisposer = null;\\n    this.network_status_change_listener = null;\\n    this.themeChangeDisposer = null;\\n    this.theme_change_listener = null;\\n    this.realAccountSignupEndedDisposer = null;\\n    this.real_account_signup_ended_listener = null;\\n\\n    _initializerDefineProperty(this, \\\"partial_fetch_time\\\", _descriptor3, this);\\n\\n    var root_store = options.root_store,\\n        local_storage_properties = options.local_storage_properties,\\n        session_storage_properties = options.session_storage_properties,\\n        validation_rules = options.validation_rules,\\n        store_name = options.store_name;\\n    Object.defineProperty(this, 'root_store', {\\n      enumerable: false,\\n      writable: true\\n    });\\n    Object.defineProperty(this, 'local_storage_properties', {\\n      enumerable: false,\\n      writable: true\\n    });\\n    Object.defineProperty(this, 'session_storage_properties', {\\n      enumerable: false,\\n      writable: true\\n    });\\n    var has_local_or_session_storage = local_storage_properties && local_storage_properties.length || session_storage_properties && session_storage_properties.length;\\n\\n    if (has_local_or_session_storage) {\\n      if (!store_name) {\\n        throw new Error('store_name is required for local/session storage');\\n      }\\n\\n      Object.defineProperty(this, 'store_name', {\\n        value: store_name,\\n        enumerable: false,\\n        writable: false\\n      });\\n    }\\n\\n    this.root_store = root_store;\\n    this.local_storage_properties = local_storage_properties || [];\\n    this.session_storage_properties = session_storage_properties || [];\\n    this.setValidationRules(validation_rules);\\n    this.setupReactionForLocalStorage();\\n    this.setupReactionForSessionStorage();\\n    this.retrieveFromStorage();\\n  }\\n  /**\\n   * Returns an snapshot of the current store\\n   *\\n   * @param {String[]} properties - A list of properties' names that should be in the snapshot.\\n   *\\n   * @return {Object} Returns a cloned object of the store.\\n   */\\n\\n\\n  base_store_createClass(BaseStore, [{\\n    key: \\\"getSnapshot\\\",\\n    value: function getSnapshot(properties) {\\n      var snapshot = (0,external_mobx_.toJS)(this);\\n\\n      if (!(0,shared_.isEmptyObject)(this.root_store)) {\\n        snapshot.root_store = this.root_store;\\n      }\\n\\n      if (properties && properties.length) {\\n        snapshot = properties.reduce(function (result, p) {\\n          return Object.assign(result, _defineProperty({}, p, snapshot[p]));\\n        }, {});\\n      }\\n\\n      return snapshot;\\n    }\\n    /**\\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\\n     *  and invokes `saveToStorage` when there are any changes on them.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setupReactionForLocalStorage\\\",\\n    value: function setupReactionForLocalStorage() {\\n      var _this = this;\\n\\n      if (this.local_storage_properties.length) {\\n        (0,external_mobx_.reaction)(function () {\\n          return _this.local_storage_properties.map(function (i) {\\n            return _this[i];\\n          });\\n        }, function () {\\n          return _this.saveToStorage(_this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE);\\n        });\\n      }\\n    }\\n    /**\\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\\n     *  and invokes `saveToStorage` when there are any changes on them.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setupReactionForSessionStorage\\\",\\n    value: function setupReactionForSessionStorage() {\\n      var _this2 = this;\\n\\n      if (this.session_storage_properties.length) {\\n        (0,external_mobx_.reaction)(function () {\\n          return _this2.session_storage_properties.map(function (i) {\\n            return _this2[i];\\n          });\\n        }, function () {\\n          return _this2.saveToStorage(_this2.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE);\\n        });\\n      }\\n    }\\n    /**\\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\\n     *\\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"saveToStorage\\\",\\n    value: function saveToStorage(properties, storage) {\\n      var snapshot = JSON.stringify(this.getSnapshot(properties), function (key, value) {\\n        if (value !== null) return value;\\n        return undefined;\\n      });\\n\\n      if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\\n        localStorage.setItem(this.store_name, snapshot);\\n      } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\\n        sessionStorage.setItem(this.store_name, snapshot);\\n      }\\n    }\\n    /**\\n     * Retrieves saved snapshot of the store and assigns to the current instance.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"retrieveFromStorage\\\",\\n    value: function retrieveFromStorage() {\\n      var _this3 = this;\\n\\n      var local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\\n      var session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\\n\\n      var snapshot = _objectSpread(_objectSpread({}, local_storage_snapshot), session_storage_snapshot);\\n\\n      Object.keys(snapshot).forEach(function (k) {\\n        return _this3[k] = snapshot[k];\\n      });\\n    }\\n    /**\\n     * Sets validation error messages for an observable property of the store\\n     *\\n     * @param {String} propertyName - The observable property's name\\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setValidationErrorMessages\\\",\\n    value: function setValidationErrorMessages(propertyName, messages) {\\n      var _this4 = this;\\n\\n      var is_different = function is_different() {\\n        return !!_this4.validation_errors[propertyName].filter(function (x) {\\n          return !messages.includes(x);\\n        }).concat(messages.filter(function (x) {\\n          return !_this4.validation_errors[propertyName].includes(x);\\n        })).length;\\n      };\\n\\n      if (!this.validation_errors[propertyName] || is_different()) {\\n        this.validation_errors[propertyName] = messages;\\n      }\\n    }\\n    /**\\n     * Sets validation rules\\n     *\\n     * @param {object} rules\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setValidationRules\\\",\\n    value: function setValidationRules() {\\n      var _this5 = this;\\n\\n      var rules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      Object.keys(rules).forEach(function (key) {\\n        _this5.addRule(key, rules[key]);\\n      });\\n    }\\n    /**\\n     * Adds rules to the particular property\\n     *\\n     * @param {String} property\\n     * @param {String} rules\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"addRule\\\",\\n    value: function addRule(property, rules) {\\n      var _this6 = this;\\n\\n      this.validation_rules[property] = rules;\\n      (0,external_mobx_.intercept)(this, property, function (change) {\\n        _this6.validateProperty(property, change.newValue);\\n\\n        return change;\\n      });\\n    }\\n    /**\\n     * Validates a particular property of the store\\n     *\\n     * @param {String} property - The name of the property in the store\\n     * @param {object} value    - The value of the property, it can be undefined.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"validateProperty\\\",\\n    value: function validateProperty(property, value) {\\n      var _this7 = this;\\n\\n      var trigger = this.validation_rules[property].trigger;\\n\\n      var inputs = _defineProperty({}, property, value !== undefined ? value : this[property]);\\n\\n      var validation_rules = _defineProperty({}, property, this.validation_rules[property].rules || []);\\n\\n      if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\\n        inputs[trigger] = this[trigger];\\n        validation_rules[trigger] = this.validation_rules[trigger].rules || [];\\n      }\\n\\n      var validator = new Validator_validator(inputs, validation_rules, this);\\n      validator.isPassed();\\n      Object.keys(inputs).forEach(function (key) {\\n        _this7.setValidationErrorMessages(key, validator.errors.get(key));\\n      });\\n    }\\n    /**\\n     * Validates all properties which validation rule has been set for.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"validateAllProperties\\\",\\n    value: function validateAllProperties() {\\n      var _this8 = this;\\n\\n      var validation_rules = Object.keys(this.validation_rules);\\n      var validation_errors = Object.keys(this.validation_errors);\\n      validation_rules.forEach(function (p) {\\n        _this8.validateProperty(p, _this8[p]);\\n      }); // Remove keys that are present in error, but not in rules:\\n\\n      validation_errors.forEach(function (error) {\\n        if (!validation_rules.includes(error)) {\\n          delete _this8.validation_errors[error];\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"onSwitchAccount\\\",\\n    value: function onSwitchAccount(listener) {\\n      var _this9 = this;\\n\\n      if (listener) {\\n        this.switch_account_listener = listener;\\n        this.switchAccountDisposer = (0,external_mobx_.when)(function () {\\n          return _this9.root_store.client.switch_broadcast;\\n        }, function () {\\n          try {\\n            var result = _this9.switch_account_listener();\\n\\n            if (result && result.then && typeof result.then === 'function') {\\n              result.then(function () {\\n                _this9.root_store.client.switchEndSignal();\\n\\n                _this9.onSwitchAccount(_this9.switch_account_listener);\\n              });\\n            } else {\\n              throw new Error('Switching account listeners are required to return a promise.');\\n            }\\n          } catch (error) {\\n            // there is no listener currently active. so we can just ignore the error raised from treating\\n            // a null object as a function. Although, in development mode, we throw a console error.\\n            if (!(0,shared_.isProduction)()) {\\n              console.error(error); // eslint-disable-line\\n            }\\n          }\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"onPreSwitchAccount\\\",\\n    value: function onPreSwitchAccount(listener) {\\n      var _this10 = this;\\n\\n      if (listener) {\\n        this.pre_switch_account_listener = listener;\\n        this.preSwitchAccountDisposer = (0,external_mobx_.when)(function () {\\n          return _this10.root_store.client.pre_switch_broadcast;\\n        }, function () {\\n          try {\\n            var result = _this10.pre_switch_account_listener();\\n\\n            if (result && result.then && typeof result.then === 'function') {\\n              result.then(function () {\\n                _this10.root_store.client.setPreSwitchAccount(false);\\n\\n                _this10.onPreSwitchAccount(_this10.pre_switch_account_listener);\\n              });\\n            } else {\\n              throw new Error('Pre-switch account listeners are required to return a promise.');\\n            }\\n          } catch (error) {\\n            // there is no listener currently active. so we can just ignore the error raised from treating\\n            // a null object as a function. Although, in development mode, we throw a console error.\\n            if (!(0,shared_.isProduction)()) {\\n              console.error(error); // eslint-disable-line\\n            }\\n          }\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"onLogout\\\",\\n    value: function onLogout(listener) {\\n      var _this11 = this;\\n\\n      this.logoutDisposer = (0,external_mobx_.when)(function () {\\n        return _this11.root_store.client.has_logged_out;\\n      }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var result;\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _context.prev = 0;\\n                result = _this11.logout_listener();\\n\\n                if (!(result && result.then && typeof result.then === 'function')) {\\n                  _context.next = 6;\\n                  break;\\n                }\\n\\n                result.then(function () {\\n                  _this11.root_store.client.setLogout(false);\\n\\n                  _this11.onLogout(_this11.logout_listener);\\n                });\\n                _context.next = 7;\\n                break;\\n\\n              case 6:\\n                throw new Error('Logout listeners are required to return a promise.');\\n\\n              case 7:\\n                _context.next = 12;\\n                break;\\n\\n              case 9:\\n                _context.prev = 9;\\n                _context.t0 = _context[\\\"catch\\\"](0);\\n\\n                // there is no listener currently active. so we can just ignore the error raised from treating\\n                // a null object as a function. Although, in development mode, we throw a console error.\\n                if (!(0,shared_.isProduction)()) {\\n                  console.error(_context.t0); // eslint-disable-line\\n                }\\n\\n              case 12:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, null, [[0, 9]]);\\n      })));\\n      this.logout_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onClientInit\\\",\\n    value: function onClientInit(listener) {\\n      var _this12 = this;\\n\\n      this.clientInitDisposer = (0,external_mobx_.when)(function () {\\n        return _this12.root_store.client.initialized_broadcast;\\n      }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var result;\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _context2.prev = 0;\\n                result = _this12.client_init_listener();\\n\\n                if (!(result && result.then && typeof result.then === 'function')) {\\n                  _context2.next = 6;\\n                  break;\\n                }\\n\\n                result.then(function () {\\n                  _this12.root_store.client.setInitialized(false);\\n\\n                  _this12.onClientInit(_this12.client_init_listener);\\n                });\\n                _context2.next = 7;\\n                break;\\n\\n              case 6:\\n                throw new Error('Client init listeners are required to return a promise.');\\n\\n              case 7:\\n                _context2.next = 12;\\n                break;\\n\\n              case 9:\\n                _context2.prev = 9;\\n                _context2.t0 = _context2[\\\"catch\\\"](0);\\n\\n                // there is no listener currently active. so we can just ignore the error raised from treating\\n                // a null object as a function. Although, in development mode, we throw a console error.\\n                if (!(0,shared_.isProduction)()) {\\n                  console.error(_context2.t0); // eslint-disable-line\\n                }\\n\\n              case 12:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, null, [[0, 9]]);\\n      })));\\n      this.client_init_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onNetworkStatusChange\\\",\\n    value: function onNetworkStatusChange(listener) {\\n      var _this13 = this;\\n\\n      this.networkStatusChangeDisposer = (0,external_mobx_.reaction)(function () {\\n        return _this13.root_store.common.is_network_online;\\n      }, function (is_online) {\\n        try {\\n          _this13.network_status_change_listener(is_online);\\n        } catch (error) {\\n          // there is no listener currently active. so we can just ignore the error raised from treating\\n          // a null object as a function. Although, in development mode, we throw a console error.\\n          if (!(0,shared_.isProduction)()) {\\n            console.error(error); // eslint-disable-line\\n          }\\n        }\\n      });\\n      this.network_status_change_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onThemeChange\\\",\\n    value: function onThemeChange(listener) {\\n      var _this14 = this;\\n\\n      this.themeChangeDisposer = (0,external_mobx_.reaction)(function () {\\n        return _this14.root_store.ui.is_dark_mode_on;\\n      }, function (is_dark_mode_on) {\\n        try {\\n          _this14.theme_change_listener(is_dark_mode_on);\\n        } catch (error) {\\n          // there is no listener currently active. so we can just ignore the error raised from treating\\n          // a null object as a function. Although, in development mode, we throw a console error.\\n          if (!(0,shared_.isProduction)()) {\\n            console.error(error); // eslint-disable-line\\n          }\\n        }\\n      });\\n      this.theme_change_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onRealAccountSignupEnd\\\",\\n    value: function onRealAccountSignupEnd(listener) {\\n      var _this15 = this;\\n\\n      this.realAccountSignupEndedDisposer = (0,external_mobx_.when)(function () {\\n        return _this15.root_store.ui.has_real_account_signup_ended;\\n      }, function () {\\n        try {\\n          var result = _this15.real_account_signup_ended_listener();\\n\\n          if (result && result.then && typeof result.then === 'function') {\\n            result.then(function () {\\n              _this15.root_store.ui.setRealAccountSignupEnd(false);\\n\\n              _this15.onRealAccountSignupEnd(_this15.real_account_signup_ended_listener);\\n            });\\n          } else {\\n            throw new Error('Real account signup listeners are required to return a promise.');\\n          }\\n        } catch (error) {\\n          // there is no listener currently active. so we can just ignore the error raised from treating\\n          // a null object as a function. Although, in development mode, we throw a console error.\\n          if (!(0,shared_.isProduction)()) {\\n            console.error(error); // eslint-disable-line\\n          }\\n        }\\n      });\\n      this.real_account_signup_ended_listener = listener;\\n    }\\n  }, {\\n    key: \\\"disposePreSwitchAccount\\\",\\n    value: function disposePreSwitchAccount() {\\n      if (typeof this.preSwitchAccountDisposer === 'function') {\\n        this.preSwitchAccountDisposer();\\n      }\\n\\n      this.pre_switch_account_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeSwitchAccount\\\",\\n    value: function disposeSwitchAccount() {\\n      if (typeof this.switchAccountDisposer === 'function') {\\n        this.switchAccountDisposer();\\n      }\\n\\n      this.switch_account_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeLogout\\\",\\n    value: function disposeLogout() {\\n      if (typeof this.logoutDisposer === 'function') {\\n        this.logoutDisposer();\\n      }\\n\\n      this.logout_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeClientInit\\\",\\n    value: function disposeClientInit() {\\n      if (typeof this.clientInitDisposer === 'function') {\\n        this.clientInitDisposer();\\n      }\\n\\n      this.client_init_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeNetworkStatusChange\\\",\\n    value: function disposeNetworkStatusChange() {\\n      if (typeof this.networkStatusChangeDisposer === 'function') {\\n        this.networkStatusChangeDisposer();\\n      }\\n\\n      this.network_status_change_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeThemeChange\\\",\\n    value: function disposeThemeChange() {\\n      if (typeof this.themeChangeDisposer === 'function') {\\n        this.themeChangeDisposer();\\n      }\\n\\n      this.theme_change_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeRealAccountSignupEnd\\\",\\n    value: function disposeRealAccountSignupEnd() {\\n      if (typeof this.realAccountSignupEndedDisposer === 'function') {\\n        this.realAccountSignupEndedDisposer();\\n      }\\n\\n      this.real_account_signup_ended_listener = null;\\n    }\\n  }, {\\n    key: \\\"onUnmount\\\",\\n    value: function onUnmount() {\\n      this.disposePreSwitchAccount();\\n      this.disposeSwitchAccount();\\n      this.disposeLogout();\\n      this.disposeClientInit();\\n      this.disposeNetworkStatusChange();\\n      this.disposeThemeChange();\\n      this.disposeRealAccountSignupEnd();\\n    }\\n  }, {\\n    key: \\\"assertHasValidCache\\\",\\n    value: function assertHasValidCache(loginid) {\\n      // account was changed when this was unmounted.\\n      if (this.root_store.client.loginid !== loginid) {\\n        for (var _len = arguments.length, reactions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\\n          reactions[_key - 1] = arguments[_key];\\n        }\\n\\n        reactions.forEach(function (act) {\\n          return act();\\n        });\\n        this.partial_fetch_time = false;\\n      }\\n    }\\n  }]);\\n\\n  return BaseStore;\\n}(), _class2.STORAGES = Object.freeze({\\n  LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\\n  SESSION_STORAGE: Symbol('SESSION_STORAGE')\\n}), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \\\"validation_errors\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \\\"validation_rules\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \\\"partial_fetch_time\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _applyDecoratedDescriptor(_class.prototype, \\\"retrieveFromStorage\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"retrieveFromStorage\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"setValidationErrorMessages\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"setValidationErrorMessages\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"setValidationRules\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"setValidationRules\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"addRule\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"addRule\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"validateProperty\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"validateProperty\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"validateAllProperties\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"validateAllProperties\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onSwitchAccount\\\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onSwitchAccount\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onPreSwitchAccount\\\", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onPreSwitchAccount\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onLogout\\\", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onLogout\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onClientInit\\\", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onClientInit\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onNetworkStatusChange\\\", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onNetworkStatusChange\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onThemeChange\\\", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onThemeChange\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onRealAccountSignupEnd\\\", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onRealAccountSignupEnd\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposePreSwitchAccount\\\", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposePreSwitchAccount\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeSwitchAccount\\\", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeSwitchAccount\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeLogout\\\", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeLogout\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeClientInit\\\", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeClientInit\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeNetworkStatusChange\\\", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeNetworkStatusChange\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeThemeChange\\\", [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeThemeChange\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeRealAccountSignupEnd\\\", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeRealAccountSignupEnd\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onUnmount\\\", [_dec15], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onUnmount\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"assertHasValidCache\\\", [_dec16], Object.getOwnPropertyDescriptor(_class.prototype, \\\"assertHasValidCache\\\"), _class.prototype)), _class));\\n\\n;// CONCATENATED MODULE: ./Stores/Cashier/on-ramp-store.js\\nfunction _typeof(obj) { \\\"@babel/helpers - typeof\\\"; if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nvar on_ramp_store_dec, on_ramp_store_dec2, on_ramp_store_dec3, on_ramp_store_dec4, on_ramp_store_dec5, on_ramp_store_dec6, on_ramp_store_dec7, on_ramp_store_dec8, on_ramp_store_dec9, on_ramp_store_dec10, on_ramp_store_dec11, on_ramp_store_dec12, on_ramp_store_dec13, on_ramp_store_dec14, on_ramp_store_dec15, on_ramp_store_dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, on_ramp_store_class, on_ramp_store_descriptor, on_ramp_store_descriptor2, on_ramp_store_descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, on_ramp_store_temp;\\n\\nfunction on_ramp_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction on_ramp_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { on_ramp_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { on_ramp_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction on_ramp_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction on_ramp_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction on_ramp_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction on_ramp_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) on_ramp_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) on_ramp_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \\\"function\\\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction on_ramp_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction on_ramp_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n\\n\\nvar OnRampStore = (on_ramp_store_dec = external_mobx_.observable.shallow, on_ramp_store_dec2 = external_mobx_.observable.ref, on_ramp_store_dec3 = external_mobx_.action.bound, on_ramp_store_dec4 = external_mobx_.action.bound, on_ramp_store_dec5 = external_mobx_.action.bound, on_ramp_store_dec6 = external_mobx_.action.bound, on_ramp_store_dec7 = external_mobx_.action.bound, on_ramp_store_dec8 = external_mobx_.action.bound, on_ramp_store_dec9 = external_mobx_.action.bound, on_ramp_store_dec10 = external_mobx_.action.bound, on_ramp_store_dec11 = external_mobx_.action.bound, on_ramp_store_dec12 = external_mobx_.action.bound, on_ramp_store_dec13 = external_mobx_.action.bound, on_ramp_store_dec14 = external_mobx_.action.bound, on_ramp_store_dec15 = external_mobx_.action.bound, on_ramp_store_dec16 = external_mobx_.action.bound, _dec17 = external_mobx_.action.bound, _dec18 = external_mobx_.action.bound, _dec19 = external_mobx_.action.bound, _dec20 = external_mobx_.action.bound, _dec21 = external_mobx_.action.bound, _dec22 = external_mobx_.action.bound, (on_ramp_store_class = (on_ramp_store_temp = /*#__PURE__*/function (_BaseStore) {\\n  _inherits(OnRampStore, _BaseStore);\\n\\n  var _super = _createSuper(OnRampStore);\\n\\n  function OnRampStore(_ref) {\\n    var _this;\\n\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    on_ramp_store_classCallCheck(this, OnRampStore);\\n\\n    _this = _super.call(this, {\\n      root_store: root_store\\n    });\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"api_error\\\", on_ramp_store_descriptor, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"deposit_address\\\", on_ramp_store_descriptor2, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_deposit_address_loading\\\", on_ramp_store_descriptor3, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_deposit_address_popover_open\\\", _descriptor4, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_onramp_modal_open\\\", _descriptor5, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_requesting_widget_html\\\", _descriptor6, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"onramp_providers\\\", _descriptor7, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"selected_provider\\\", _descriptor8, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"should_show_widget\\\", _descriptor9, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"widget_error\\\", _descriptor10, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"widget_html\\\", _descriptor11, _assertThisInitialized(_this));\\n\\n    _this.deposit_address_ref = null;\\n    _this.WS = WS;\\n\\n    _this.onClientInit( /*#__PURE__*/on_ramp_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n      return regeneratorRuntime.wrap(function _callee$(_context) {\\n        while (1) {\\n          switch (_context.prev = _context.next) {\\n            case 0:\\n              _this.setOnrampProviders([on_ramp_providers.createChangellyProvider(_assertThisInitialized(_this)), on_ramp_providers.createXanPoolProvider(_assertThisInitialized(_this)), on_ramp_providers.createBanxaProvider(_assertThisInitialized(_this))]);\\n\\n            case 1:\\n            case \\\"end\\\":\\n              return _context.stop();\\n          }\\n        }\\n      }, _callee);\\n    })));\\n\\n    return _this;\\n  }\\n\\n  on_ramp_store_createClass(OnRampStore, [{\\n    key: \\\"is_onramp_tab_visible\\\",\\n    get: function get() {\\n      var client = this.root_store.client;\\n      return client.is_virtual === false && (0,shared_.isCryptocurrency)(client.currency) && this.filtered_onramp_providers.length > 0;\\n    }\\n  }, {\\n    key: \\\"filtered_onramp_providers\\\",\\n    get: function get() {\\n      var client = this.root_store.client;\\n      return this.onramp_providers // Ensure provider supports this user's account currency.\\n      .filter(function (provider) {\\n        var to_currencies = provider.getToCurrencies();\\n        return to_currencies.includes('*') || to_currencies.includes(client.currency.toLowerCase());\\n      }) // Ensure provider supports this user's residency.\\n      .filter(function (provider) {\\n        var allowed_residencies = provider.getAllowedResidencies();\\n        return allowed_residencies.includes('*') || allowed_residencies.includes(client.residence);\\n      });\\n    }\\n  }, {\\n    key: \\\"onramp_popup_modal_title\\\",\\n    get: function get() {\\n      if (this.should_show_widget) {\\n        return (0,translations_.localize)('Payment channel');\\n      } else if (this.selected_provider) {\\n        if (this.should_show_dialog) {\\n          return this.api_error ? (0,translations_.localize)('Our server cannot retrieve an address.') : (0,translations_.localize)(\\\"You don't have a crypto address yet.\\\");\\n        }\\n\\n        return ' '; // Empty string to render header + close icon.\\n      }\\n\\n      return undefined;\\n    }\\n  }, {\\n    key: \\\"should_show_dialog\\\",\\n    get: function get() {\\n      return this.api_error || !this.deposit_address;\\n    }\\n  }, {\\n    key: \\\"onMountOnramp\\\",\\n    value: function onMountOnramp() {\\n      var _this2 = this;\\n\\n      this.disposeThirdPartyJsReaction = (0,external_mobx_.reaction)(function () {\\n        return _this2.selected_provider;\\n      }, /*#__PURE__*/function () {\\n        var _ref3 = on_ramp_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(provider) {\\n          var dependencies, _yield$import, loadjs, script_name;\\n\\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n            while (1) {\\n              switch (_context2.prev = _context2.next) {\\n                case 0:\\n                  if (provider) {\\n                    _context2.next = 2;\\n                    break;\\n                  }\\n\\n                  return _context2.abrupt(\\\"return\\\");\\n\\n                case 2:\\n                  dependencies = provider.getScriptDependencies();\\n\\n                  if (!(dependencies.length === 0)) {\\n                    _context2.next = 5;\\n                    break;\\n                  }\\n\\n                  return _context2.abrupt(\\\"return\\\");\\n\\n                case 5:\\n                  _context2.next = 7;\\n                  return __webpack_require__.e(/* import() | loadjs */ \\\"loadjs\\\").then(__webpack_require__.t.bind(__webpack_require__, \\\"../../../node_modules/loadjs/dist/loadjs.umd.js\\\", 23));\\n\\n                case 7:\\n                  _yield$import = _context2.sent;\\n                  loadjs = _yield$import[\\\"default\\\"];\\n                  script_name = \\\"\\\".concat((0,shared_.getKebabCase)(provider.name), \\\"-onramp\\\");\\n\\n                  if (!loadjs.isDefined(script_name)) {\\n                    loadjs(dependencies, script_name, {\\n                      error: function error() {\\n                        // eslint-disable-next-line no-console\\n                        console.warn(\\\"Dependencies for onramp provider \\\".concat(provider.name, \\\" could not be loaded.\\\"));\\n\\n                        _this2.setSelectedProvider(null);\\n                      }\\n                    });\\n                  }\\n\\n                case 11:\\n                case \\\"end\\\":\\n                  return _context2.stop();\\n              }\\n            }\\n          }, _callee2);\\n        }));\\n\\n        return function (_x) {\\n          return _ref3.apply(this, arguments);\\n        };\\n      }()); // When \\\"should_show_widget\\\", attempt to fetch \\\"selected_provider\\\"'s \\\"widget_html\\\".\\n\\n      this.disposeGetWidgetHtmlReaction = (0,external_mobx_.reaction)(function () {\\n        return _this2.should_show_widget;\\n      }, function (should_show_widget) {\\n        if (should_show_widget) {\\n          if (_this2.is_requesting_widget_html) {\\n            return;\\n          }\\n\\n          _this2.setIsRequestingWidgetHtml(true);\\n\\n          _this2.selected_provider.getWidgetHtml().then(function (widget_html) {\\n            if (widget_html) {\\n              // Regular providers (iframe/JS embed)\\n              _this2.setWidgetHtml(widget_html);\\n            } else {\\n              // An empty resolve (widget_html) identifies a redirect.\\n              _this2.setShouldShowWidget(false);\\n            }\\n          })[\\\"catch\\\"](function (error) {\\n            _this2.setWidgetError(error);\\n          })[\\\"finally\\\"](function () {\\n            return _this2.setIsRequestingWidgetHtml(false);\\n          });\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"onUnmountOnramp\\\",\\n    value: function onUnmountOnramp() {\\n      if (typeof this.disposeThirdPartyJsReaction === 'function') {\\n        this.disposeThirdPartyJsReaction();\\n      }\\n\\n      if (typeof this.disposeGetWidgetHtmlReaction === 'function') {\\n        this.disposeGetWidgetHtmlReaction();\\n      }\\n    }\\n  }, {\\n    key: \\\"onClickCopyDepositAddress\\\",\\n    value: function onClickCopyDepositAddress() {\\n      var _this3 = this;\\n\\n      var range = document.createRange();\\n      range.selectNodeContents(this.deposit_address_ref);\\n      var selections = window.getSelection();\\n      selections.removeAllRanges();\\n      selections.addRange(range);\\n      navigator.clipboard.writeText(this.deposit_address).then(function () {\\n        _this3.setIsDepositAddressPopoverOpen(true);\\n\\n        setTimeout(function () {\\n          return _this3.setIsDepositAddressPopoverOpen(false);\\n        }, 500);\\n      });\\n    }\\n  }, {\\n    key: \\\"onClickDisclaimerContinue\\\",\\n    value: function onClickDisclaimerContinue() {\\n      this.setShouldShowWidget(true);\\n    }\\n  }, {\\n    key: \\\"onClickGoToDepositPage\\\",\\n    value: function onClickGoToDepositPage() {\\n      this.pollApiForDepositAddress(false);\\n      window.open((0,shared_.websiteUrl)() + shared_.routes.cashier_deposit.substring(1));\\n    }\\n  }, {\\n    key: \\\"pollApiForDepositAddress\\\",\\n    value: function pollApiForDepositAddress(should_allow_empty_address) {\\n      var _this4 = this;\\n\\n      // should_allow_empty_address: API returns empty deposit address for legacy accounts\\n      // that have never generated a deposit address. Setting this to \\\"true\\\" will allow\\n      // the user to be redirected to the Deposit page (where an address will be generated).\\n      // Setting this to \\\"false\\\" will start polling the API for this deposit address.\\n      this.setIsDepositAddressLoading(true);\\n      this.setApiError(null);\\n      var deposit_address_interval = setInterval(function () {\\n        return getDepositAddressFromApi;\\n      }, 3000);\\n\\n      var getDepositAddressFromApi = function getDepositAddressFromApi() {\\n        _this4.root_store.modules.cashier.WS.authorized.cashier('deposit', {\\n          provider: 'crypto',\\n          type: 'api'\\n        }).then(function (response) {\\n          var should_clear_interval = false;\\n\\n          if (response.error) {\\n            _this4.setApiError(response.error);\\n\\n            should_clear_interval = true;\\n          } else {\\n            var address = response.cashier.deposit.address;\\n\\n            if (address || should_allow_empty_address) {\\n              _this4.setDepositAddress(address);\\n\\n              should_clear_interval = true;\\n            }\\n          }\\n\\n          if (should_clear_interval) {\\n            clearInterval(deposit_address_interval);\\n\\n            _this4.setIsDepositAddressLoading(false);\\n          }\\n        });\\n      };\\n\\n      getDepositAddressFromApi();\\n      setTimeout(function () {\\n        clearInterval(deposit_address_interval);\\n\\n        _this4.setIsDepositAddressLoading(false);\\n      }, 30000);\\n    }\\n  }, {\\n    key: \\\"resetPopup\\\",\\n    value: function resetPopup() {\\n      this.setApiError(null);\\n      this.setDepositAddress(null);\\n      this.setDepositAddressRef(null);\\n      this.setIsDepositAddressLoading(true);\\n      this.setSelectedProvider(null);\\n      this.setShouldShowWidget(false);\\n      this.setWidgetError(null);\\n      this.setWidgetHtml(null);\\n    }\\n  }, {\\n    key: \\\"setApiError\\\",\\n    value: function setApiError(api_error) {\\n      this.api_error = api_error;\\n    }\\n  }, {\\n    key: \\\"setCopyIconRef\\\",\\n    value: function setCopyIconRef(ref) {\\n      this.copy_icon_ref = ref;\\n    }\\n  }, {\\n    key: \\\"setDepositAddress\\\",\\n    value: function setDepositAddress(deposit_address) {\\n      this.deposit_address = deposit_address;\\n    }\\n  }, {\\n    key: \\\"setDepositAddressRef\\\",\\n    value: function setDepositAddressRef(ref) {\\n      this.deposit_address_ref = ref;\\n    }\\n  }, {\\n    key: \\\"setIsDepositAddressLoading\\\",\\n    value: function setIsDepositAddressLoading(is_loading) {\\n      this.is_deposit_address_loading = is_loading;\\n    }\\n  }, {\\n    key: \\\"setIsDepositAddressPopoverOpen\\\",\\n    value: function setIsDepositAddressPopoverOpen(is_open) {\\n      this.is_deposit_address_popover_open = is_open;\\n    }\\n  }, {\\n    key: \\\"setIsOnRampModalOpen\\\",\\n    value: function setIsOnRampModalOpen(is_open) {\\n      this.is_onramp_modal_open = is_open;\\n    }\\n  }, {\\n    key: \\\"setIsRequestingWidgetHtml\\\",\\n    value: function setIsRequestingWidgetHtml(is_requesting_widget_html) {\\n      this.is_requesting_widget_html = is_requesting_widget_html;\\n    }\\n  }, {\\n    key: \\\"setSelectedProvider\\\",\\n    value: function setSelectedProvider(provider) {\\n      if (provider) {\\n        this.selected_provider = provider;\\n        this.setIsOnRampModalOpen(true);\\n        this.pollApiForDepositAddress(true);\\n      } else {\\n        this.setIsOnRampModalOpen(false);\\n        this.selected_provider = null;\\n      }\\n    }\\n  }, {\\n    key: \\\"setShouldShowWidget\\\",\\n    value: function setShouldShowWidget(should_show) {\\n      this.should_show_widget = should_show;\\n    }\\n  }, {\\n    key: \\\"setOnrampProviders\\\",\\n    value: function setOnrampProviders(onramp_providers) {\\n      this.onramp_providers = onramp_providers.slice();\\n    }\\n  }, {\\n    key: \\\"setWidgetError\\\",\\n    value: function setWidgetError(widget_error) {\\n      this.widget_error = widget_error;\\n    }\\n  }, {\\n    key: \\\"setWidgetHtml\\\",\\n    value: function setWidgetHtml(widget_html) {\\n      this.widget_html = widget_html;\\n    }\\n  }]);\\n\\n  return OnRampStore;\\n}(BaseStore), on_ramp_store_temp), (on_ramp_store_descriptor = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"api_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_descriptor2 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"deposit_address\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_descriptor3 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_deposit_address_loading\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), _descriptor4 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_deposit_address_popover_open\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor5 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_onramp_modal_open\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor6 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_requesting_widget_html\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor7 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onramp_providers\\\", [on_ramp_store_dec], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor8 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"selected_provider\\\", [on_ramp_store_dec2], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor9 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"should_show_widget\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor10 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"widget_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor11 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"widget_html\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_onramp_tab_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"is_onramp_tab_visible\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"filtered_onramp_providers\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"filtered_onramp_providers\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onramp_popup_modal_title\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onramp_popup_modal_title\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"should_show_dialog\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"should_show_dialog\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onMountOnramp\\\", [on_ramp_store_dec3], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onMountOnramp\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onUnmountOnramp\\\", [on_ramp_store_dec4], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onUnmountOnramp\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onClickCopyDepositAddress\\\", [on_ramp_store_dec5], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onClickCopyDepositAddress\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onClickDisclaimerContinue\\\", [on_ramp_store_dec6], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onClickDisclaimerContinue\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onClickGoToDepositPage\\\", [on_ramp_store_dec7], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onClickGoToDepositPage\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"pollApiForDepositAddress\\\", [on_ramp_store_dec8], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"pollApiForDepositAddress\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"resetPopup\\\", [on_ramp_store_dec9], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"resetPopup\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setApiError\\\", [on_ramp_store_dec10], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setApiError\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setCopyIconRef\\\", [on_ramp_store_dec11], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setCopyIconRef\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddress\\\", [on_ramp_store_dec12], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddress\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddressRef\\\", [on_ramp_store_dec13], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddressRef\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressLoading\\\", [on_ramp_store_dec14], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressLoading\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressPopoverOpen\\\", [on_ramp_store_dec15], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressPopoverOpen\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsOnRampModalOpen\\\", [on_ramp_store_dec16], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsOnRampModalOpen\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsRequestingWidgetHtml\\\", [_dec17], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsRequestingWidgetHtml\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setSelectedProvider\\\", [_dec18], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setSelectedProvider\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setShouldShowWidget\\\", [_dec19], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setShouldShowWidget\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setOnrampProviders\\\", [_dec20], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setOnrampProviders\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setWidgetError\\\", [_dec21], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setWidgetError\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setWidgetHtml\\\", [_dec22], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setWidgetHtml\\\"), on_ramp_store_class.prototype)), on_ramp_store_class));\\n\\n// EXTERNAL MODULE: ../../../node_modules/prop-types/index.js\\nvar prop_types = __webpack_require__(\\\"../../../node_modules/prop-types/index.js\\\");\\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n;// CONCATENATED MODULE: ./Containers/cashier-notifications.jsx\\n\\n\\n\\n\\nvar CashierNotifications = function CashierNotifications(_ref) {\\n  var p2p_notification_count = _ref.p2p_notification_count;\\n  return /*#__PURE__*/external_react_default().createElement((external_react_default()).Fragment, null, /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcCashier\\\",\\n    className: \\\"header__icon\\\"\\n  }), !!p2p_notification_count && /*#__PURE__*/external_react_default().createElement(components_.Counter, {\\n    className: \\\"cashier__counter\\\",\\n    count: p2p_notification_count\\n  }));\\n};\\n\\nCashierNotifications.propTypes = {\\n  p2p_notification_count: (prop_types_default()).number\\n};\\n/* harmony default export */ const cashier_notifications = (CashierNotifications);\\n;// CONCATENATED MODULE: ./Stores/Cashier/cashier-store.js\\nfunction cashier_store_typeof(obj) { \\\"@babel/helpers - typeof\\\"; if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { cashier_store_typeof = function _typeof(obj) { return typeof obj; }; } else { cashier_store_typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return cashier_store_typeof(obj); }\\n\\nvar cashier_store_class, cashier_store_descriptor, cashier_store_descriptor2, cashier_store_temp, _class3, cashier_store_descriptor3, cashier_store_descriptor4, cashier_store_descriptor5, cashier_store_descriptor6, cashier_store_descriptor7, cashier_store_descriptor8, cashier_store_descriptor9, cashier_store_descriptor10, cashier_store_descriptor11, _temp2, cashier_store_dec, _class5, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _temp3, _class7, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _temp4, cashier_store_dec2, cashier_store_dec3, cashier_store_dec4, _class9, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41, _descriptor42, _descriptor43, _descriptor44, _descriptor45, _descriptor46, _descriptor47, _descriptor48, _temp5, _class11, _descriptor49, _descriptor50, _descriptor51, _descriptor52, _temp6, cashier_store_dec5, cashier_store_dec6, cashier_store_dec7, cashier_store_dec8, cashier_store_dec9, cashier_store_dec10, cashier_store_dec11, cashier_store_dec12, cashier_store_dec13, cashier_store_dec14, cashier_store_dec15, cashier_store_dec16, cashier_store_dec17, cashier_store_dec18, cashier_store_dec19, cashier_store_dec20, cashier_store_dec21, cashier_store_dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _dec47, _dec48, _dec49, _dec50, _dec51, _dec52, _dec53, _dec54, _dec55, _dec56, _dec57, _dec58, _dec59, _dec60, _dec61, _dec62, _dec63, _dec64, _dec65, _dec66, _dec67, _dec68, _dec69, _dec70, _dec71, _dec72, _dec73, _dec74, _dec75, _dec76, _dec77, _dec78, _dec79, _dec80, _class13, _descriptor53, _descriptor54, _descriptor55, _descriptor56, _descriptor57, _descriptor58, _descriptor59, _descriptor60, _descriptor61, _descriptor62, _descriptor63, _descriptor64, _descriptor65, _temp7;\\n\\nfunction cashier_store_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction cashier_store_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { cashier_store_ownKeys(Object(source), true).forEach(function (key) { cashier_store_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { cashier_store_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\n\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\"string\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name; if (n === \\\"Map\\\" || n === \\\"Set\\\") return Array.from(o); if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\n\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\"undefined\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\"return\\\"] != null) _i[\\\"return\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nfunction cashier_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction cashier_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { cashier_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { cashier_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction cashier_store_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction cashier_store_inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) cashier_store_setPrototypeOf(subClass, superClass); }\\n\\nfunction cashier_store_setPrototypeOf(o, p) { cashier_store_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return cashier_store_setPrototypeOf(o, p); }\\n\\nfunction cashier_store_createSuper(Derived) { var hasNativeReflectConstruct = cashier_store_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = cashier_store_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = cashier_store_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return cashier_store_possibleConstructorReturn(this, result); }; }\\n\\nfunction cashier_store_possibleConstructorReturn(self, call) { if (call && (cashier_store_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return cashier_store_assertThisInitialized(self); }\\n\\nfunction cashier_store_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction cashier_store_isNativeReflectConstruct() { if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \\\"function\\\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction cashier_store_getPrototypeOf(o) { cashier_store_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return cashier_store_getPrototypeOf(o); }\\n\\nfunction cashier_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction cashier_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) cashier_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) cashier_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction cashier_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction cashier_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction cashier_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction cashier_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n/* eslint-disable max-classes-per-file */\\n\\n\\n\\n\\n\\n\\n\\n\\nvar hasTransferNotAllowedLoginid = function hasTransferNotAllowedLoginid(loginid) {\\n  return loginid.startsWith('MX');\\n};\\n\\nvar getSelectedError = function getSelectedError(selected_value, is_from_account) {\\n  if (is_from_account) {\\n    return /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n      i18n_default_text: \\\"Transfer from {{selected_value}} is not allowed, Please choose another account from dropdown\\\",\\n      values: {\\n        selected_value: selected_value\\n      }\\n    });\\n  }\\n\\n  return /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Transfer to {{selected_value}} is not allowed, Please choose another account from dropdown\\\",\\n    values: {\\n      selected_value: selected_value\\n    }\\n  });\\n};\\n\\nvar Config = (cashier_store_class = (cashier_store_temp = function Config(_ref) {\\n  var container = _ref.container;\\n\\n  cashier_store_classCallCheck(this, Config);\\n\\n  this.container = '';\\n  this.is_session_timeout = true;\\n  this.onIframeLoaded = '';\\n  this.timeout_session = '';\\n\\n  cashier_store_initializerDefineProperty(this, \\\"iframe_height\\\", cashier_store_descriptor, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"iframe_url\\\", cashier_store_descriptor2, this);\\n\\n  this.container = container;\\n}, cashier_store_temp), (cashier_store_descriptor = cashier_store_applyDecoratedDescriptor(cashier_store_class.prototype, \\\"iframe_height\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), cashier_store_descriptor2 = cashier_store_applyDecoratedDescriptor(cashier_store_class.prototype, \\\"iframe_url\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n})), cashier_store_class);\\nvar ConfigError = (_class3 = (_temp2 = function ConfigError() {\\n  cashier_store_classCallCheck(this, ConfigError);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"message\\\", cashier_store_descriptor3, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"code\\\", cashier_store_descriptor4, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"fields\\\", cashier_store_descriptor5, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_show_full_page\\\", cashier_store_descriptor6, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"onClickButton\\\", cashier_store_descriptor7, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_ask_uk_funds_protection\\\", cashier_store_descriptor8, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_self_exclusion_max_turnover_set\\\", cashier_store_descriptor9, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_ask_authentication\\\", cashier_store_descriptor10, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_ask_financial_risk_approval\\\", cashier_store_descriptor11, this);\\n}, _temp2), (cashier_store_descriptor3 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"message\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), cashier_store_descriptor4 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"code\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), cashier_store_descriptor5 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"fields\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), cashier_store_descriptor6 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"is_show_full_page\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), cashier_store_descriptor7 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"onClickButton\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), cashier_store_descriptor8 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"is_ask_uk_funds_protection\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), cashier_store_descriptor9 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"is_self_exclusion_max_turnover_set\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), cashier_store_descriptor10 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"is_ask_authentication\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), cashier_store_descriptor11 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"is_ask_financial_risk_approval\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n})), _class3);\\nvar ConfigPaymentAgent = (cashier_store_dec = external_mobx_.action.bound, (_class5 = (_temp3 = /*#__PURE__*/function () {\\n  function ConfigPaymentAgent() {\\n    cashier_store_classCallCheck(this, ConfigPaymentAgent);\\n\\n    this.list = [];\\n\\n    cashier_store_initializerDefineProperty(this, \\\"agents\\\", _descriptor12, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"container\\\", _descriptor13, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"error\\\", _descriptor14, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"filtered_list\\\", _descriptor15, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_name_selected\\\", _descriptor16, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_withdraw\\\", _descriptor17, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_try_withdraw_successful\\\", _descriptor18, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_withdraw_successful\\\", _descriptor19, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"confirm\\\", _descriptor20, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"receipt\\\", _descriptor21, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"selected_bank\\\", _descriptor22, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"supported_banks\\\", _descriptor23, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"verification\\\", _descriptor24, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"active_tab_index\\\", _descriptor25, this);\\n  }\\n\\n  cashier_store_createClass(ConfigPaymentAgent, [{\\n    key: \\\"setActiveTabIndex\\\",\\n    value: function setActiveTabIndex(index) {\\n      this.active_tab_index = index;\\n    }\\n  }]);\\n\\n  return ConfigPaymentAgent;\\n}(), _temp3), (_descriptor12 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"agents\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor13 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 'payment_agent';\\n  }\\n}), _descriptor14 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigError();\\n  }\\n}), _descriptor15 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"filtered_list\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor16 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"is_name_selected\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), _descriptor17 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"is_withdraw\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor18 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"is_try_withdraw_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor19 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"is_withdraw_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor20 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"confirm\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor21 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"receipt\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor22 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"selected_bank\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _descriptor23 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"supported_banks\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor24 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"verification\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigVerification();\\n  }\\n}), _descriptor25 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"active_tab_index\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"setActiveTabIndex\\\", [cashier_store_dec], Object.getOwnPropertyDescriptor(_class5.prototype, \\\"setActiveTabIndex\\\"), _class5.prototype)), _class5));\\nvar ConfigPaymentAgentTransfer = (_class7 = (_temp4 = function ConfigPaymentAgentTransfer() {\\n  cashier_store_classCallCheck(this, ConfigPaymentAgentTransfer);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"container\\\", _descriptor26, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"error\\\", _descriptor27, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_payment_agent\\\", _descriptor28, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_try_transfer_successful\\\", _descriptor29, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_transfer_successful\\\", _descriptor30, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"confirm\\\", _descriptor31, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"receipt\\\", _descriptor32, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"transfer_limit\\\", _descriptor33, this);\\n}, _temp4), (_descriptor26 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 'payment_agent_transfer';\\n  }\\n}), _descriptor27 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigError();\\n  }\\n}), _descriptor28 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"is_payment_agent\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor29 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"is_try_transfer_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor30 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"is_transfer_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor31 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"confirm\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor32 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"receipt\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor33 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"transfer_limit\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n})), _class7);\\nvar ConfigAccountTransfer = (cashier_store_dec2 = external_mobx_.action.bound, cashier_store_dec3 = external_mobx_.action.bound, cashier_store_dec4 = external_mobx_.action.bound, (_class9 = (_temp5 = /*#__PURE__*/function () {\\n  function ConfigAccountTransfer() {\\n    cashier_store_classCallCheck(this, ConfigAccountTransfer);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"accounts_list\\\", _descriptor34, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"container\\\", _descriptor35, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"error\\\", _descriptor36, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"has_no_account\\\", _descriptor37, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"has_no_accounts_balance\\\", _descriptor38, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_transfer_confirm\\\", _descriptor39, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_transfer_successful\\\", _descriptor40, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_mt5_transfer_in_progress\\\", _descriptor41, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"minimum_fee\\\", _descriptor42, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"receipt\\\", _descriptor43, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"selected_from\\\", _descriptor44, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"selected_to\\\", _descriptor45, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"account_transfer_amount\\\", _descriptor46, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"transfer_fee\\\", _descriptor47, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"transfer_limit\\\", _descriptor48, this);\\n  }\\n\\n  cashier_store_createClass(ConfigAccountTransfer, [{\\n    key: \\\"setBalanceByLoginId\\\",\\n    value: function setBalanceByLoginId(loginid, balance) {\\n      this.accounts_list.find(function (acc) {\\n        return loginid === acc.value;\\n      }).balance = balance;\\n    }\\n  }, {\\n    key: \\\"setBalanceSelectedFrom\\\",\\n    value: function setBalanceSelectedFrom(balance) {\\n      this.selected_from.balance = balance;\\n    }\\n  }, {\\n    key: \\\"setBalanceSelectedTo\\\",\\n    value: function setBalanceSelectedTo(balance) {\\n      this.selected_to.balance = balance;\\n    }\\n  }]);\\n\\n  return ConfigAccountTransfer;\\n}(), _temp5), (_descriptor34 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"accounts_list\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor35 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 'account_transfer';\\n  }\\n}), _descriptor36 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigError();\\n  }\\n}), _descriptor37 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"has_no_account\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor38 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"has_no_accounts_balance\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor39 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"is_transfer_confirm\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor40 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"is_transfer_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor41 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"is_mt5_transfer_in_progress\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor42 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"minimum_fee\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor43 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"receipt\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor44 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"selected_from\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor45 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"selected_to\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor46 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"account_transfer_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor47 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"transfer_fee\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor48 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"transfer_limit\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"setBalanceByLoginId\\\", [cashier_store_dec2], Object.getOwnPropertyDescriptor(_class9.prototype, \\\"setBalanceByLoginId\\\"), _class9.prototype), cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"setBalanceSelectedFrom\\\", [cashier_store_dec3], Object.getOwnPropertyDescriptor(_class9.prototype, \\\"setBalanceSelectedFrom\\\"), _class9.prototype), cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"setBalanceSelectedTo\\\", [cashier_store_dec4], Object.getOwnPropertyDescriptor(_class9.prototype, \\\"setBalanceSelectedTo\\\"), _class9.prototype)), _class9));\\nvar ConfigVerification = (_class11 = (_temp6 = function ConfigVerification() {\\n  cashier_store_classCallCheck(this, ConfigVerification);\\n\\n  this.is_button_clicked = false;\\n  this.timeout_button = '';\\n\\n  cashier_store_initializerDefineProperty(this, \\\"error\\\", _descriptor49, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_email_sent\\\", _descriptor50, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_resend_clicked\\\", _descriptor51, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"resend_timeout\\\", _descriptor52, this);\\n}, _temp6), (_descriptor49 = cashier_store_applyDecoratedDescriptor(_class11.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigError();\\n  }\\n}), _descriptor50 = cashier_store_applyDecoratedDescriptor(_class11.prototype, \\\"is_email_sent\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor51 = cashier_store_applyDecoratedDescriptor(_class11.prototype, \\\"is_resend_clicked\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor52 = cashier_store_applyDecoratedDescriptor(_class11.prototype, \\\"resend_timeout\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 60;\\n  }\\n})), _class11);\\nvar CashierStore = (cashier_store_dec5 = external_mobx_.action.bound, cashier_store_dec6 = external_mobx_.action.bound, cashier_store_dec7 = external_mobx_.action.bound, cashier_store_dec8 = external_mobx_.action.bound, cashier_store_dec9 = external_mobx_.action.bound, cashier_store_dec10 = external_mobx_.action.bound, cashier_store_dec11 = external_mobx_.action.bound, cashier_store_dec12 = external_mobx_.action.bound, cashier_store_dec13 = external_mobx_.action.bound, cashier_store_dec14 = external_mobx_.action.bound, cashier_store_dec15 = external_mobx_.action.bound, cashier_store_dec16 = external_mobx_.action.bound, cashier_store_dec17 = external_mobx_.action.bound, cashier_store_dec18 = external_mobx_.action.bound, cashier_store_dec19 = external_mobx_.action.bound, cashier_store_dec20 = external_mobx_.action.bound, cashier_store_dec21 = external_mobx_.action.bound, cashier_store_dec22 = external_mobx_.action.bound, _dec23 = external_mobx_.action.bound, _dec24 = external_mobx_.action.bound, _dec25 = external_mobx_.action.bound, _dec26 = external_mobx_.action.bound, _dec27 = external_mobx_.action.bound, _dec28 = external_mobx_.action.bound, _dec29 = external_mobx_.action.bound, _dec30 = external_mobx_.action.bound, _dec31 = external_mobx_.action.bound, _dec32 = external_mobx_.action.bound, _dec33 = external_mobx_.action.bound, _dec34 = external_mobx_.action.bound, _dec35 = external_mobx_.action.bound, _dec36 = external_mobx_.action.bound, _dec37 = external_mobx_.action.bound, _dec38 = external_mobx_.action.bound, _dec39 = external_mobx_.action.bound, _dec40 = external_mobx_.action.bound, _dec41 = external_mobx_.action.bound, _dec42 = external_mobx_.action.bound, _dec43 = external_mobx_.action.bound, _dec44 = external_mobx_.action.bound, _dec45 = external_mobx_.action.bound, _dec46 = external_mobx_.action.bound, _dec47 = external_mobx_.action.bound, _dec48 = external_mobx_.action.bound, _dec49 = external_mobx_.action.bound, _dec50 = external_mobx_.action.bound, _dec51 = external_mobx_.action.bound, _dec52 = external_mobx_.action.bound, _dec53 = external_mobx_.action.bound, _dec54 = external_mobx_.action.bound, _dec55 = external_mobx_.action.bound, _dec56 = external_mobx_.action.bound, _dec57 = external_mobx_.action.bound, _dec58 = external_mobx_.action.bound, _dec59 = external_mobx_.action.bound, _dec60 = external_mobx_.action.bound, _dec61 = external_mobx_.action.bound, _dec62 = external_mobx_.action.bound, _dec63 = external_mobx_.action.bound, _dec64 = external_mobx_.action.bound, _dec65 = external_mobx_.action.bound, _dec66 = external_mobx_.action.bound, _dec67 = external_mobx_.action.bound, _dec68 = external_mobx_.action.bound, _dec69 = external_mobx_.action.bound, _dec70 = external_mobx_.action.bound, _dec71 = external_mobx_.action.bound, _dec72 = external_mobx_.action.bound, _dec73 = external_mobx_.action.bound, _dec74 = external_mobx_.action.bound, _dec75 = external_mobx_.action.bound, _dec76 = external_mobx_.action.bound, _dec77 = external_mobx_.action.bound, _dec78 = external_mobx_.action.bound, _dec79 = external_mobx_.action.bound, _dec80 = external_mobx_.action.bound, (_class13 = (_temp7 = /*#__PURE__*/function (_BaseStore) {\\n  cashier_store_inherits(CashierStore, _BaseStore);\\n\\n  var _super = cashier_store_createSuper(CashierStore);\\n\\n  function CashierStore(_ref2) {\\n    var _this$map_action;\\n\\n    var _this;\\n\\n    var root_store = _ref2.root_store,\\n        WS = _ref2.WS;\\n\\n    cashier_store_classCallCheck(this, CashierStore);\\n\\n    _this = _super.call(this, {\\n      root_store: root_store\\n    });\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_loading\\\", _descriptor53, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_p2p_visible\\\", _descriptor54, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"p2p_notification_count\\\", _descriptor55, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"cashier_route_tab_index\\\", _descriptor56, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_10k_withdrawal_limit_reached\\\", _descriptor57, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_deposit\\\", _descriptor58, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_cashier_default\\\", _descriptor59, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"config\\\", _descriptor60, cashier_store_assertThisInitialized(_this));\\n\\n    _this.active_container = _this.config.deposit.container;\\n\\n    _this.onRemount = function () {};\\n\\n    _this.is_populating_values = false;\\n    _this.containers = [_this.config.deposit.container, _this.config.withdraw.container];\\n    _this.map_action = (_this$map_action = {}, cashier_store_defineProperty(_this$map_action, _this.config.withdraw.container, 'payment_withdraw'), cashier_store_defineProperty(_this$map_action, _this.config.payment_agent.container, 'payment_agent_withdraw'), _this$map_action);\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"resetPaymentAgent\\\", _descriptor61, cashier_store_assertThisInitialized(_this));\\n\\n    _this.requestTransferBetweenAccounts = /*#__PURE__*/function () {\\n      var _ref4 = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref3) {\\n        var amount, is_mt_transfer, currency, transfer_between_accounts, account_status_response;\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                amount = _ref3.amount;\\n\\n                if (_this.root_store.client.is_logged_in) {\\n                  _context.next = 3;\\n                  break;\\n                }\\n\\n                return _context.abrupt(\\\"return\\\", null);\\n\\n              case 3:\\n                _this.setLoading(true);\\n\\n                _this.setErrorMessage('');\\n\\n                is_mt_transfer = _this.config.account_transfer.selected_from.is_mt || _this.config.account_transfer.selected_to.is_mt;\\n                if (is_mt_transfer) _this.setIsMT5TransferInProgress(true);\\n                currency = _this.config.account_transfer.selected_from.currency;\\n                _context.next = 10;\\n                return _this.WS.authorized.transferBetweenAccounts(_this.config.account_transfer.selected_from.value, _this.config.account_transfer.selected_to.value, currency, amount);\\n\\n              case 10:\\n                transfer_between_accounts = _context.sent;\\n                if (is_mt_transfer) _this.setIsMT5TransferInProgress(false);\\n\\n                if (!transfer_between_accounts.error) {\\n                  _context.next = 21;\\n                  break;\\n                }\\n\\n                if (!(transfer_between_accounts.error.code === 'Fiat2CryptoTransferOverLimit')) {\\n                  _context.next = 18;\\n                  break;\\n                }\\n\\n                _context.next = 16;\\n                return _this.WS.authorized.getAccountStatus();\\n\\n              case 16:\\n                account_status_response = _context.sent;\\n\\n                if (!account_status_response.error) {\\n                  _this.root_store.client.setAccountStatus(account_status_response.get_account_status);\\n                }\\n\\n              case 18:\\n                _this.setErrorMessage(transfer_between_accounts.error);\\n\\n                _context.next = 26;\\n                break;\\n\\n              case 21:\\n                _this.setReceiptTransfer({\\n                  amount: (0,shared_.formatMoney)(currency, amount, true)\\n                });\\n\\n                transfer_between_accounts.accounts.forEach(function (account) {\\n                  _this.config.account_transfer.setBalanceByLoginId(account.loginid, account.balance);\\n\\n                  if (account.loginid === _this.config.account_transfer.selected_from.value) {\\n                    _this.config.account_transfer.setBalanceSelectedFrom(account.balance);\\n                  } else if (account.loginid === _this.config.account_transfer.selected_to.value) {\\n                    _this.config.account_transfer.setBalanceSelectedTo(account.balance);\\n                  } // if one of the accounts was mt5\\n\\n\\n                  if (account.account_type === shared_.CFD_PLATFORMS.MT5) {\\n                    Promise.all([_this.WS.mt5LoginList(), _this.WS.balanceAll()]).then(function (_ref5) {\\n                      var _ref6 = _slicedToArray(_ref5, 2),\\n                          mt5_login_list_response = _ref6[0],\\n                          balance_response = _ref6[1];\\n\\n                      // update the balance for account switcher by renewing the mt5_login_list response\\n                      _this.root_store.client.responseMt5LoginList(mt5_login_list_response); // update total balance since MT5 total only comes in non-stream balance call\\n\\n\\n                      _this.root_store.client.setBalanceOtherAccounts(balance_response.balance);\\n                    });\\n                  } // if one of the accounts was dxtrade\\n\\n\\n                  if (account.account_type === shared_.CFD_PLATFORMS.DXTRADE) {\\n                    Promise.all([_this.WS.tradingPlatformAccountsList(shared_.CFD_PLATFORMS.DXTRADE), _this.WS.balanceAll()]).then(function (_ref7) {\\n                      var _ref8 = _slicedToArray(_ref7, 2),\\n                          dxtrade_login_list_response = _ref8[0],\\n                          balance_response = _ref8[1];\\n\\n                      // update the balance for account switcher by renewing the dxtrade_login_list_response\\n                      _this.root_store.client.responseTradingPlatformAccountsList(dxtrade_login_list_response); // update total balance since Dxtrade total only comes in non-stream balance call\\n\\n\\n                      _this.root_store.client.setBalanceOtherAccounts(balance_response.balance);\\n                    });\\n                  }\\n                });\\n\\n                _this.setAccountTransferAmount(null);\\n\\n                _this.setIsTransferConfirm(false);\\n\\n                _this.setIsTransferSuccessful(true);\\n\\n              case 26:\\n                _this.setLoading(false);\\n\\n                return _context.abrupt(\\\"return\\\", transfer_between_accounts);\\n\\n              case 28:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee);\\n      }));\\n\\n      return function (_x) {\\n        return _ref4.apply(this, arguments);\\n      };\\n    }();\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"resetAccountTransfer\\\", _descriptor62, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"requestTryPaymentAgentTransfer\\\", _descriptor63, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"requestPaymentAgentTransfer\\\", _descriptor64, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"resetPaymentAgentTransfer\\\", _descriptor65, cashier_store_assertThisInitialized(_this));\\n\\n    _this.WS = WS;\\n\\n    _this.root_store.menu.attach({\\n      id: 'dt_cashier_tab',\\n      icon: /*#__PURE__*/external_react_default().createElement(cashier_notifications, {\\n        p2p_notification_count: _this.p2p_notification_count\\n      }),\\n      text: function text() {\\n        return (0,translations_.localize)('Cashier');\\n      },\\n      link_to: shared_.routes.cashier,\\n      login_only: true\\n    });\\n\\n    _this.onramp = new OnRampStore({\\n      root_store: _this.root_store,\\n      WS: _this.WS\\n    });\\n\\n    _this.init();\\n\\n    return _this;\\n  }\\n\\n  cashier_store_createClass(CashierStore, [{\\n    key: \\\"is_payment_agent_visible\\\",\\n    get: function get() {\\n      return !!(this.config.payment_agent.filtered_list.length || this.config.payment_agent.agents.length);\\n    }\\n  }, {\\n    key: \\\"is_payment_agent_transfer_visible\\\",\\n    get: function get() {\\n      return this.config.payment_agent_transfer.is_payment_agent;\\n    }\\n  }, {\\n    key: \\\"is_account_transfer_visible\\\",\\n    get: function get() {\\n      // cashier Transfer account tab is hidden for iom clients\\n      // check for residence to hide the tab before creating a real money account\\n      return this.root_store.client.residence !== 'im';\\n    }\\n  }, {\\n    key: \\\"is_p2p_enabled\\\",\\n    get: function get() {\\n      return this.is_p2p_visible && !this.root_store.client.is_eu;\\n    }\\n  }, {\\n    key: \\\"setIsDeposit\\\",\\n    value: function setIsDeposit(is_deposit) {\\n      this.is_deposit = is_deposit;\\n    }\\n  }, {\\n    key: \\\"setIsCashierDefault\\\",\\n    value: function setIsCashierDefault(is_cashier_default) {\\n      this.is_cashier_default = is_cashier_default;\\n    }\\n  }, {\\n    key: \\\"setAccountSwitchListener\\\",\\n    value: function setAccountSwitchListener() {\\n      // cashier inits once and tries to stay active until switching account\\n      // since cashier calls take a long time to respond or display in iframe\\n      // so we don't have any unmount function here and everything gets reset on switch instead\\n      this.disposeSwitchAccount();\\n      this.onSwitchAccount(this.accountSwitcherListener);\\n    } // Initialise P2P attributes on app load without mounting the entire cashier\\n\\n  }, {\\n    key: \\\"init\\\",\\n    value: function init() {\\n      var _this2 = this;\\n\\n      (0,external_mobx_.when)(function () {\\n        return _this2.root_store.client.is_logged_in;\\n      }, /*#__PURE__*/cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _context2.next = 2;\\n                return _this2.checkP2pStatus();\\n\\n              case 2:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2);\\n      })));\\n      (0,external_mobx_.reaction)(function () {\\n        return [_this2.root_store.client.switched, _this2.root_store.client.is_logged_in, _this2.root_store.client.currency];\\n      }, /*#__PURE__*/cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                _context3.next = 2;\\n                return _this2.WS.wait('get_settings');\\n\\n              case 2:\\n                if (!_this2.root_store.client.is_logged_in) {\\n                  _context3.next = 7;\\n                  break;\\n                }\\n\\n                _context3.next = 5;\\n                return _this2.checkP2pStatus();\\n\\n              case 5:\\n                _context3.next = 7;\\n                return _this2.filterPaymentAgentList();\\n\\n              case 7:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3);\\n      })));\\n    }\\n  }, {\\n    key: \\\"checkP2pStatus\\\",\\n    value: function () {\\n      var _checkP2pStatus = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\\n        var advertiser_info, advertiser_error, is_p2p_restricted;\\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\\n          while (1) {\\n            switch (_context4.prev = _context4.next) {\\n              case 0:\\n                _context4.next = 2;\\n                return this.WS.authorized.p2pAdvertiserInfo();\\n\\n              case 2:\\n                advertiser_info = _context4.sent;\\n                advertiser_error = (0,shared_.getPropertyValue)(advertiser_info, ['error', 'code']);\\n                is_p2p_restricted = advertiser_error === 'RestrictedCountry' || advertiser_error === 'RestrictedCurrency';\\n                this.setIsP2pVisible(!(is_p2p_restricted || this.root_store.client.is_virtual));\\n\\n              case 6:\\n              case \\\"end\\\":\\n                return _context4.stop();\\n            }\\n          }\\n        }, _callee4, this);\\n      }));\\n\\n      function checkP2pStatus() {\\n        return _checkP2pStatus.apply(this, arguments);\\n      }\\n\\n      return checkP2pStatus;\\n    }()\\n  }, {\\n    key: \\\"onMountCommon\\\",\\n    value: function () {\\n      var _onMountCommon = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(should_remount) {\\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\\n          while (1) {\\n            switch (_context5.prev = _context5.next) {\\n              case 0:\\n                if (!this.root_store.client.is_logged_in) {\\n                  _context5.next = 9;\\n                  break;\\n                }\\n\\n                if (!this.is_populating_values) {\\n                  _context5.next = 3;\\n                  break;\\n                }\\n\\n                return _context5.abrupt(\\\"return\\\");\\n\\n              case 3:\\n                this.is_populating_values = true;\\n\\n                if (should_remount) {\\n                  this.onRemount = this.onMountCommon;\\n                } // we need to see if client's country has PA\\n                // if yes, we can show the PA tab in cashier\\n\\n\\n                if (!this.config.payment_agent.list.length) {\\n                  this.setPaymentAgentList().then(this.filterPaymentAgentList);\\n                }\\n\\n                if (!this.config.payment_agent_transfer.is_payment_agent) {\\n                  this.checkIsPaymentAgent();\\n                }\\n\\n                if (!this.config.account_transfer.accounts_list.length) {\\n                  this.sortAccountsTransfer();\\n                }\\n\\n                if (!this.onramp.is_onramp_tab_visible && window.location.pathname.endsWith(shared_.routes.cashier_onramp)) {\\n                  this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n                }\\n\\n              case 9:\\n              case \\\"end\\\":\\n                return _context5.stop();\\n            }\\n          }\\n        }, _callee5, this);\\n      }));\\n\\n      function onMountCommon(_x2) {\\n        return _onMountCommon.apply(this, arguments);\\n      }\\n\\n      return onMountCommon;\\n    }()\\n  }, {\\n    key: \\\"setCashierTabIndex\\\",\\n    value: function setCashierTabIndex(index) {\\n      this.cashier_route_tab_index = index;\\n    }\\n  }, {\\n    key: \\\"onMountDeposit\\\",\\n    value: function () {\\n      var _onMountDeposit = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(verification_code) {\\n        var current_container, response_cashier;\\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\\n          while (1) {\\n            switch (_context6.prev = _context6.next) {\\n              case 0:\\n                current_container = this.active_container;\\n                this.setErrorMessage('');\\n                this.setContainerHeight(0);\\n                this.setLoading(true);\\n\\n                if (this.config[this.active_container].is_session_timeout) {\\n                  _context6.next = 7;\\n                  break;\\n                }\\n\\n                this.checkIframeLoaded();\\n                return _context6.abrupt(\\\"return\\\");\\n\\n              case 7:\\n                // if session has timed out reset everything\\n                this.setIframeUrl('');\\n\\n                if (!(this.active_container === this.config.withdraw.container && !verification_code || this.root_store.client.is_virtual)) {\\n                  _context6.next = 11;\\n                  break;\\n                }\\n\\n                this.setLoading(false); // if virtual, clear everything and don't proceed further\\n                // if no verification code, we should request again\\n\\n                return _context6.abrupt(\\\"return\\\");\\n\\n              case 11:\\n                _context6.next = 13;\\n                return this.WS.authorized.cashier(this.active_container, {\\n                  verification_code: verification_code\\n                });\\n\\n              case 13:\\n                response_cashier = _context6.sent;\\n\\n                if (!(current_container !== this.active_container)) {\\n                  _context6.next = 17;\\n                  break;\\n                }\\n\\n                this.setLoading(false);\\n                return _context6.abrupt(\\\"return\\\");\\n\\n              case 17:\\n                if (!response_cashier.error) {\\n                  _context6.next = 25;\\n                  break;\\n                }\\n\\n                this.handleCashierError(response_cashier.error);\\n                this.setLoading(false);\\n                this.setSessionTimeout(true);\\n                this.clearTimeoutCashierUrl();\\n\\n                if (verification_code) {\\n                  // clear verification code on error\\n                  this.clearVerification();\\n                }\\n\\n                _context6.next = 36;\\n                break;\\n\\n              case 25:\\n                if (!(0,shared_.isCryptocurrency)(this.root_store.client.currency)) {\\n                  _context6.next = 31;\\n                  break;\\n                }\\n\\n                this.setLoading(false);\\n                this.setContainerHeight('540');\\n                this.setIframeUrl(response_cashier.cashier); // crypto cashier can only be accessed once and the session expires\\n                // so no need to set timeouts to keep the session alive\\n\\n                _context6.next = 36;\\n                break;\\n\\n              case 31:\\n                _context6.next = 33;\\n                return this.checkIframeLoaded();\\n\\n              case 33:\\n                this.setIframeUrl(response_cashier.cashier);\\n                this.setSessionTimeout(false);\\n                this.setTimeoutCashierUrl();\\n\\n              case 36:\\n              case \\\"end\\\":\\n                return _context6.stop();\\n            }\\n          }\\n        }, _callee6, this);\\n      }));\\n\\n      function onMountDeposit(_x3) {\\n        return _onMountDeposit.apply(this, arguments);\\n      }\\n\\n      return onMountDeposit;\\n    }()\\n  }, {\\n    key: \\\"setNotificationCount\\\",\\n    value: function setNotificationCount(notification_count) {\\n      this.p2p_notification_count = notification_count;\\n    }\\n  }, {\\n    key: \\\"setIsP2pVisible\\\",\\n    value: function setIsP2pVisible(is_p2p_visible) {\\n      this.is_p2p_visible = is_p2p_visible;\\n\\n      if (!is_p2p_visible && window.location.pathname.endsWith(shared_.routes.cashier_p2p)) {\\n        this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n      }\\n    }\\n  }, {\\n    key: \\\"onMount\\\",\\n    value: function () {\\n      var _onMount = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(verification_code) {\\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\\n          while (1) {\\n            switch (_context7.prev = _context7.next) {\\n              case 0:\\n                this.onRemount = this.onMount;\\n                _context7.next = 3;\\n                return this.onMountCommon();\\n\\n              case 3:\\n                if (!(this.containers.indexOf(this.active_container) === -1 && !this.root_store.client.is_switching)) {\\n                  _context7.next = 5;\\n                  break;\\n                }\\n\\n                throw new Error('Cashier Store onMount requires a valid container name.');\\n\\n              case 5:\\n                this.onMountDeposit(verification_code);\\n\\n              case 6:\\n              case \\\"end\\\":\\n                return _context7.stop();\\n            }\\n          }\\n        }, _callee7, this);\\n      }));\\n\\n      function onMount(_x4) {\\n        return _onMount.apply(this, arguments);\\n      }\\n\\n      return onMount;\\n    }()\\n  }, {\\n    key: \\\"is_cashier_locked\\\",\\n    get: function get() {\\n      if (!this.root_store.client.account_status.status) return false;\\n      var status = this.root_store.client.account_status.status;\\n      return status.some(function (status_name) {\\n        return status_name === 'cashier_locked';\\n      });\\n    }\\n  }, {\\n    key: \\\"is_deposit_locked\\\",\\n    get: function get() {\\n      var _this$root_store$clie = this.root_store.client,\\n          is_authentication_needed = _this$root_store$clie.is_authentication_needed,\\n          is_tnc_needed = _this$root_store$clie.is_tnc_needed,\\n          is_financial_account = _this$root_store$clie.is_financial_account,\\n          is_financial_information_incomplete = _this$root_store$clie.is_financial_information_incomplete,\\n          is_trading_experience_incomplete = _this$root_store$clie.is_trading_experience_incomplete,\\n          account_status = _this$root_store$clie.account_status,\\n          is_eu = _this$root_store$clie.is_eu,\\n          mt5_login_list = _this$root_store$clie.mt5_login_list;\\n      if (!account_status.status) return false;\\n      var need_authentication = this.config.deposit.error.is_ask_authentication || is_authentication_needed && is_eu;\\n      var need_financial_assessment = is_financial_account && (is_financial_information_incomplete || is_trading_experience_incomplete); // CR can deposit without accepting latest tnc except those with Financial STP\\n\\n      var need_tnc = (is_eu || mt5_login_list.some(function (item) {\\n        return item.account_type === 'real' && item.sub_account_type === 'financial_stp';\\n      })) && is_tnc_needed;\\n      return need_authentication || need_tnc || need_financial_assessment || this.config.deposit.error.is_ask_financial_risk_approval;\\n    }\\n  }, {\\n    key: \\\"is_withdrawal_locked\\\",\\n    get: function get() {\\n      if (!this.root_store.client.account_status.status) return false;\\n      var authentication = this.root_store.client.account_status.authentication;\\n      var need_poi = authentication.needs_verification.includes('identity');\\n      var need_authentication = this.config.withdraw.error.is_ask_authentication && need_poi;\\n      return this.root_store.client.is_withdrawal_lock || need_authentication || this.config.withdraw.error.is_ask_financial_risk_approval;\\n    }\\n  }, {\\n    key: \\\"is_transfer_locked\\\",\\n    get: function get() {\\n      var _this$root_store$clie2 = this.root_store.client,\\n          is_financial_account = _this$root_store$clie2.is_financial_account,\\n          is_financial_information_incomplete = _this$root_store$clie2.is_financial_information_incomplete,\\n          is_trading_experience_incomplete = _this$root_store$clie2.is_trading_experience_incomplete,\\n          account_status = _this$root_store$clie2.account_status;\\n      if (!account_status.status) return false;\\n      var need_financial_assessment = is_financial_account && (is_financial_information_incomplete || is_trading_experience_incomplete);\\n      return need_financial_assessment && this.config.account_transfer.error.is_ask_financial_risk_approval;\\n    }\\n  }, {\\n    key: \\\"check10kLimit\\\",\\n    value: function () {\\n      var _check10kLimit = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\\n        var _yield$this$root_stor, _yield$this$root_stor2;\\n\\n        var remainder, min_withdrawal, is_limit_reached;\\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\\n          while (1) {\\n            switch (_context8.prev = _context8.next) {\\n              case 0:\\n                _context8.next = 2;\\n                return this.root_store.client.getLimits();\\n\\n              case 2:\\n                _context8.t1 = _yield$this$root_stor = _context8.sent;\\n                _context8.t0 = _context8.t1 === null;\\n\\n                if (_context8.t0) {\\n                  _context8.next = 6;\\n                  break;\\n                }\\n\\n                _context8.t0 = _yield$this$root_stor === void 0;\\n\\n              case 6:\\n                if (!_context8.t0) {\\n                  _context8.next = 10;\\n                  break;\\n                }\\n\\n                _context8.t2 = void 0;\\n                _context8.next = 11;\\n                break;\\n\\n              case 10:\\n                _context8.t2 = (_yield$this$root_stor2 = _yield$this$root_stor.get_limits) === null || _yield$this$root_stor2 === void 0 ? void 0 : _yield$this$root_stor2.remainder;\\n\\n              case 11:\\n                remainder = _context8.t2;\\n                min_withdrawal = (0,shared_.getMinWithdrawal)(this.root_store.client.currency);\\n                is_limit_reached = !!(typeof remainder !== 'undefined' && +remainder < min_withdrawal);\\n                this.set10kLimitation(is_limit_reached);\\n\\n              case 15:\\n              case \\\"end\\\":\\n                return _context8.stop();\\n            }\\n          }\\n        }, _callee8, this);\\n      }));\\n\\n      function check10kLimit() {\\n        return _check10kLimit.apply(this, arguments);\\n      }\\n\\n      return check10kLimit;\\n    }()\\n  }, {\\n    key: \\\"set10kLimitation\\\",\\n    value: function set10kLimitation(is_limit_reached) {\\n      this.is_10k_withdrawal_limit_reached = is_limit_reached;\\n    }\\n  }, {\\n    key: \\\"checkIframeLoaded\\\",\\n    value: function () {\\n      var _checkIframeLoaded = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\\n          while (1) {\\n            switch (_context9.prev = _context9.next) {\\n              case 0:\\n                this.removeOnIframeLoaded();\\n\\n                this.config[this.active_container].onIframeLoaded = function (e) {\\n                  if (/cashier|doughflow/.test(e.origin)) {\\n                    this.setLoading(false); // set the height of the container after content loads so that the\\n                    // loading bar stays vertically centered until the end\\n\\n                    if (this.root_store.ui.is_mobile) {\\n                      this.setContainerHeight(window.innerHeight - 100);\\n                    } else {\\n                      this.setContainerHeight(window.innerHeight - 190);\\n                    } // do not remove the listener\\n                    // on every iframe screen change we need to update the height to more/less to match the new content\\n\\n                  }\\n                }.bind(this);\\n\\n                window.addEventListener('message', this.config[this.active_container].onIframeLoaded, false);\\n\\n              case 3:\\n              case \\\"end\\\":\\n                return _context9.stop();\\n            }\\n          }\\n        }, _callee9, this);\\n      }));\\n\\n      function checkIframeLoaded() {\\n        return _checkIframeLoaded.apply(this, arguments);\\n      }\\n\\n      return checkIframeLoaded;\\n    }()\\n  }, {\\n    key: \\\"removeOnIframeLoaded\\\",\\n    value: function removeOnIframeLoaded() {\\n      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active_container;\\n\\n      if (this.config[container].onIframeLoaded) {\\n        window.removeEventListener('message', this.config[container].onIframeLoaded, false);\\n        this.config[container].onIframeLoaded = '';\\n      }\\n    }\\n  }, {\\n    key: \\\"setIframeUrl\\\",\\n    value: function setIframeUrl(url) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n\\n      if (url) {\\n        this.config[container].iframe_url = \\\"\\\".concat(url, \\\"&theme=\\\").concat(this.root_store.ui.is_dark_mode_on ? 'dark' : 'light'); // after we set iframe url we can clear verification code\\n\\n        this.root_store.client.setVerificationCode('', this.map_action[container]);\\n      } else {\\n        this.config[container].iframe_url = url;\\n      }\\n    }\\n  }, {\\n    key: \\\"setContainerHeight\\\",\\n    value: function setContainerHeight(height) {\\n      this.config[this.active_container].iframe_height = height;\\n    }\\n  }, {\\n    key: \\\"setErrorMessage\\\",\\n    value: function setErrorMessage(error, onClickButton, is_show_full_page, is_verification_error) {\\n      // for errors that need to show a button, reset the form\\n      var error_object = cashier_store_objectSpread({\\n        onClickButton: onClickButton,\\n        code: error.code,\\n        message: error.message,\\n        is_show_full_page: is_show_full_page || /InvalidToken|WrongResponse/.test(error.code)\\n      }, (0,shared_.getPropertyValue)(error, ['details', 'fields']) && {\\n        fields: error.details.fields\\n      });\\n\\n      if (is_verification_error && this.config[this.active_container].verification) {\\n        this.config[this.active_container].verification.error = error_object;\\n      } else {\\n        this.config[this.active_container].error = error_object;\\n      }\\n    }\\n  }, {\\n    key: \\\"handleCashierError\\\",\\n    value: function handleCashierError(error) {\\n      switch (error.code) {\\n        case 'ASK_TNC_APPROVAL':\\n          this.setErrorMessage(error, null, true);\\n          break;\\n\\n        case 'ASK_FIX_DETAILS':\\n          this.setErrorMessage(error, null, true);\\n          break;\\n\\n        case 'ASK_UK_FUNDS_PROTECTION':\\n          this.config[this.active_container].error = {\\n            is_ask_uk_funds_protection: true\\n          };\\n          break;\\n\\n        case 'ASK_SELF_EXCLUSION_MAX_TURNOVER_SET':\\n          this.config[this.active_container].error = {\\n            is_self_exclusion_max_turnover_set: true\\n          };\\n          break;\\n\\n        case 'ASK_AUTHENTICATE':\\n        case 'ASK_AGE_VERIFICATION':\\n          this.config[this.active_container].error = {\\n            is_ask_authentication: true\\n          };\\n          break;\\n\\n        case 'FinancialAssessmentRequired':\\n        case 'ASK_FINANCIAL_RISK_APPROVAL':\\n          this.config[this.active_container].error = {\\n            is_ask_financial_risk_approval: true\\n          };\\n          break;\\n\\n        default:\\n          this.config[this.active_container].error = {\\n            is_ask_uk_funds_protection: false,\\n            is_self_exclusion_max_turnover_set: false,\\n            is_ask_authentication: false,\\n            is_ask_financial_risk_approval: false\\n          };\\n          this.setErrorMessage(error);\\n      }\\n    }\\n  }, {\\n    key: \\\"setErrorConfig\\\",\\n    value: function setErrorConfig(config_name, value) {\\n      this.config[this.active_container].error = cashier_store_defineProperty({}, config_name, value);\\n    }\\n  }, {\\n    key: \\\"submitFundsProtection\\\",\\n    value: function submitFundsProtection() {\\n      var _this3 = this;\\n\\n      this.WS.send({\\n        ukgc_funds_protection: 1,\\n        tnc_approval: 1\\n      }).then(function (response) {\\n        if (response.error) {\\n          _this3.setErrorConfig('message', response.error.message);\\n        } else {\\n          _this3.setErrorConfig('is_ask_uk_funds_protection', false);\\n\\n          _this3.onMount();\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"setLoading\\\",\\n    value: function setLoading(is_loading) {\\n      this.is_loading = is_loading;\\n    }\\n  }, {\\n    key: \\\"setSessionTimeout\\\",\\n    value: function setSessionTimeout(is_session_time_out) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n      this.config[container].is_session_timeout = is_session_time_out;\\n\\n      if (is_session_time_out) {\\n        this.removeOnIframeLoaded(container);\\n      }\\n    }\\n  }, {\\n    key: \\\"setVerificationButtonClicked\\\",\\n    value: function setVerificationButtonClicked(is_button_clicked) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n      this.config[container].verification.is_button_clicked = is_button_clicked;\\n    }\\n  }, {\\n    key: \\\"setVerificationEmailSent\\\",\\n    value: function setVerificationEmailSent(is_email_sent) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n      this.config[container].verification.is_email_sent = is_email_sent;\\n    }\\n  }, {\\n    key: \\\"setVerificationResendClicked\\\",\\n    value: function setVerificationResendClicked(is_resend_clicked) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n      this.config[container].verification.is_resend_clicked = is_resend_clicked;\\n    }\\n  }, {\\n    key: \\\"setVerificationResendTimeout\\\",\\n    value: function setVerificationResendTimeout(resend_timeout) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n      this.config[container].verification.resend_timeout = resend_timeout;\\n    }\\n  }, {\\n    key: \\\"clearTimeoutCashierUrl\\\",\\n    value: function clearTimeoutCashierUrl() {\\n      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active_container;\\n\\n      if (this.config[container].timeout_session) {\\n        clearTimeout(this.config[container].timeout_session);\\n      }\\n    } // cashier session expires after one minute\\n    // so we should resend the request for container (deposit|withdraw) url on next mount\\n\\n  }, {\\n    key: \\\"setTimeoutCashierUrl\\\",\\n    value: function setTimeoutCashierUrl() {\\n      var _this4 = this;\\n\\n      this.clearTimeoutCashierUrl();\\n      this.config[this.active_container].timeout_session = setTimeout(function () {\\n        _this4.setSessionTimeout(true);\\n      }, 60000);\\n    }\\n  }, {\\n    key: \\\"clearTimeoutVerification\\\",\\n    value: function clearTimeoutVerification() {\\n      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active_container;\\n\\n      if (this.config[container].verification.timeout_button) {\\n        clearTimeout(this.config[container].verification.timeout_button);\\n      }\\n    } // verification token expires after one hour\\n    // so we should show the verification request button again after that\\n\\n  }, {\\n    key: \\\"setTimeoutVerification\\\",\\n    value: function setTimeoutVerification() {\\n      var _this5 = this;\\n\\n      this.clearTimeoutVerification();\\n      this.config[this.active_container].verification.timeout_button = setTimeout(function () {\\n        _this5.clearVerification();\\n      }, 3600000);\\n    }\\n  }, {\\n    key: \\\"sendVerificationEmail\\\",\\n    value: function () {\\n      var _sendVerificationEmail = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\\n        var _this6 = this;\\n\\n        var withdrawal_type, response_verify_email;\\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\\n          while (1) {\\n            switch (_context10.prev = _context10.next) {\\n              case 0:\\n                if (!(this.config[this.active_container].verification.is_button_clicked || !this.root_store.client.email)) {\\n                  _context10.next = 2;\\n                  break;\\n                }\\n\\n                return _context10.abrupt(\\\"return\\\");\\n\\n              case 2:\\n                this.setErrorMessage('');\\n                this.setVerificationButtonClicked(true);\\n                withdrawal_type = \\\"payment\\\".concat(this.active_container === this.config.payment_agent.container ? 'agent' : '', \\\"_withdraw\\\");\\n                _context10.next = 7;\\n                return this.WS.verifyEmail(this.root_store.client.email, withdrawal_type);\\n\\n              case 7:\\n                response_verify_email = _context10.sent;\\n\\n                if (response_verify_email.error) {\\n                  this.clearVerification();\\n                  this.setErrorMessage(response_verify_email.error, function () {\\n                    _this6.setErrorMessage('', null, null, true);\\n                  }, null, true);\\n                } else {\\n                  this.setVerificationEmailSent(true);\\n                  this.setTimeoutVerification();\\n                }\\n\\n              case 9:\\n              case \\\"end\\\":\\n                return _context10.stop();\\n            }\\n          }\\n        }, _callee10, this);\\n      }));\\n\\n      function sendVerificationEmail() {\\n        return _sendVerificationEmail.apply(this, arguments);\\n      }\\n\\n      return sendVerificationEmail;\\n    }()\\n  }, {\\n    key: \\\"resendVerificationEmail\\\",\\n    value: function resendVerificationEmail() {\\n      // don't allow clicking while ongoing timeout\\n      if (this.config[this.active_container].verification.resend_timeout < 60) {\\n        return;\\n      }\\n\\n      this.setVerificationButtonClicked(false);\\n      this.setCountDownResendVerification();\\n      this.sendVerificationEmail();\\n    }\\n  }, {\\n    key: \\\"setCountDownResendVerification\\\",\\n    value: function setCountDownResendVerification() {\\n      var _this7 = this;\\n\\n      this.setVerificationResendTimeout(this.config[this.active_container].verification.resend_timeout - 1);\\n      var resend_interval = setInterval(function () {\\n        if (!_this7.config[_this7.active_container] || !_this7.config[_this7.active_container].verification) {\\n          clearInterval(resend_interval);\\n          return;\\n        }\\n\\n        if (_this7.config[_this7.active_container].verification.resend_timeout === 1) {\\n          _this7.setVerificationResendTimeout(60);\\n\\n          clearInterval(resend_interval);\\n        } else {\\n          _this7.setVerificationResendTimeout(_this7.config[_this7.active_container].verification.resend_timeout - 1);\\n        }\\n      }, 1000);\\n    }\\n  }, {\\n    key: \\\"clearVerification\\\",\\n    value: function clearVerification() {\\n      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active_container;\\n      this.clearTimeoutVerification(container);\\n      this.setVerificationButtonClicked(false, container);\\n      this.setVerificationEmailSent(false, container);\\n      this.setVerificationResendClicked(false, container);\\n      this.setVerificationResendTimeout(60, container);\\n      this.setErrorMessage('', null, null, true);\\n      this.root_store.client.setVerificationCode('', this.map_action[container]);\\n    }\\n  }, {\\n    key: \\\"setActiveTab\\\",\\n    value: function setActiveTab(container) {\\n      this.active_container = container;\\n    }\\n  }, {\\n    key: \\\"onMountPaymentAgentList\\\",\\n    value: function () {\\n      var _onMountPaymentAgentList = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {\\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\\n          while (1) {\\n            switch (_context11.prev = _context11.next) {\\n              case 0:\\n                this.setLoading(true);\\n                this.onRemount = this.onMountPaymentAgentList;\\n                _context11.next = 4;\\n                return this.onMountCommon();\\n\\n              case 4:\\n                this.setLoading(false);\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context11.stop();\\n            }\\n          }\\n        }, _callee11, this);\\n      }));\\n\\n      function onMountPaymentAgentList() {\\n        return _onMountPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return onMountPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"getPaymentAgentList\\\",\\n    value: function () {\\n      var _getPaymentAgentList = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {\\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\\n          while (1) {\\n            switch (_context12.prev = _context12.next) {\\n              case 0:\\n                if (!this.config.payment_agent.list.length) {\\n                  _context12.next = 2;\\n                  break;\\n                }\\n\\n                return _context12.abrupt(\\\"return\\\", this.WS.wait('paymentagent_list'));\\n\\n              case 2:\\n                _context12.next = 4;\\n                return this.WS.wait('get_settings');\\n\\n              case 4:\\n                return _context12.abrupt(\\\"return\\\", this.WS.authorized.paymentAgentList(this.root_store.client.residence, this.root_store.client.currency));\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context12.stop();\\n            }\\n          }\\n        }, _callee12, this);\\n      }));\\n\\n      function getPaymentAgentList() {\\n        return _getPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return getPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"addSupportedBank\\\",\\n    value: function addSupportedBank(bank) {\\n      var supported_bank_exists = this.config.payment_agent.supported_banks.find(function (supported_bank) {\\n        return supported_bank.value === bank.toLowerCase();\\n      });\\n\\n      if (!supported_bank_exists) {\\n        this.config.payment_agent.supported_banks.push({\\n          text: bank,\\n          value: bank.toLowerCase()\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"sortSupportedBanks\\\",\\n    value: function sortSupportedBanks() {\\n      // sort supported banks alphabetically by value, the option 'All payment agents' with value 0 should be on top\\n      this.config.payment_agent.supported_banks.replace(this.config.payment_agent.supported_banks.slice().sort(function (a, b) {\\n        if (a.value < b.value) {\\n          return -1;\\n        }\\n\\n        if (a.value > b.value) {\\n          return 1;\\n        }\\n\\n        return 0;\\n      }));\\n    }\\n  }, {\\n    key: \\\"setPaymentAgentList\\\",\\n    value: function () {\\n      var _setPaymentAgentList = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(pa_list) {\\n        var _this8 = this;\\n\\n        var payment_agent_list;\\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\\n          while (1) {\\n            switch (_context13.prev = _context13.next) {\\n              case 0:\\n                _context13.t0 = pa_list;\\n\\n                if (_context13.t0) {\\n                  _context13.next = 5;\\n                  break;\\n                }\\n\\n                _context13.next = 4;\\n                return this.getPaymentAgentList();\\n\\n              case 4:\\n                _context13.t0 = _context13.sent;\\n\\n              case 5:\\n                payment_agent_list = _context13.t0;\\n\\n                if (!(!payment_agent_list || !payment_agent_list.paymentagent_list)) {\\n                  _context13.next = 8;\\n                  break;\\n                }\\n\\n                return _context13.abrupt(\\\"return\\\");\\n\\n              case 8:\\n                payment_agent_list.paymentagent_list.list.forEach(function (payment_agent) {\\n                  _this8.config.payment_agent.list.push({\\n                    email: payment_agent.email,\\n                    phone: payment_agent.telephone,\\n                    name: payment_agent.name,\\n                    supported_banks: payment_agent.supported_banks,\\n                    url: payment_agent.url\\n                  });\\n\\n                  if (payment_agent.supported_banks) {\\n                    payment_agent.supported_banks.split(',').forEach(function (bank) {\\n                      _this8.addSupportedBank(bank);\\n                    });\\n                  }\\n                });\\n                this.sortSupportedBanks();\\n\\n              case 10:\\n              case \\\"end\\\":\\n                return _context13.stop();\\n            }\\n          }\\n        }, _callee13, this);\\n      }));\\n\\n      function setPaymentAgentList(_x5) {\\n        return _setPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return setPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"filterPaymentAgentList\\\",\\n    value: function filterPaymentAgentList(bank) {\\n      var _this9 = this;\\n\\n      if (bank) {\\n        this.config.payment_agent.filtered_list = [];\\n        this.config.payment_agent.list.forEach(function (payment_agent) {\\n          if (payment_agent.supported_banks && payment_agent.supported_banks.toLowerCase().split(',').indexOf(bank) !== -1) {\\n            _this9.config.payment_agent.filtered_list.push(payment_agent);\\n          }\\n        });\\n      } else {\\n        this.config.payment_agent.filtered_list = this.config.payment_agent.list;\\n      }\\n\\n      if (!this.is_payment_agent_visible && window.location.pathname.endsWith(shared_.routes.cashier_pa)) {\\n        this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n      }\\n    }\\n  }, {\\n    key: \\\"onChangePaymentMethod\\\",\\n    value: function onChangePaymentMethod(_ref11) {\\n      var target = _ref11.target;\\n      var value = target.value === '0' ? parseInt(target.value) : target.value;\\n      this.config.payment_agent.selected_bank = value;\\n      this.filterPaymentAgentList(value);\\n    }\\n  }, {\\n    key: \\\"onMountPaymentAgentWithdraw\\\",\\n    value: function () {\\n      var _onMountPaymentAgentWithdraw = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {\\n        var _this10 = this;\\n\\n        var payment_agent_list;\\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\\n          while (1) {\\n            switch (_context14.prev = _context14.next) {\\n              case 0:\\n                this.setLoading(true);\\n                this.onRemount = this.onMountPaymentAgentWithdraw;\\n                _context14.next = 4;\\n                return this.onMountCommon();\\n\\n              case 4:\\n                this.setIsWithdraw(true);\\n                this.setIsWithdrawSuccessful(false);\\n                this.setReceipt({});\\n\\n                if (this.config.payment_agent.agents.length) {\\n                  _context14.next = 16;\\n                  break;\\n                }\\n\\n                _context14.next = 10;\\n                return this.getPaymentAgentList();\\n\\n              case 10:\\n                payment_agent_list = _context14.sent;\\n                payment_agent_list.paymentagent_list.list.forEach(function (payment_agent) {\\n                  _this10.addPaymentAgent(payment_agent);\\n                });\\n\\n                if (!payment_agent_list.paymentagent_list.list.length && window.location.pathname.endsWith(shared_.routes.cashier_pa)) {\\n                  this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n                }\\n\\n                this.setLoading(false);\\n                _context14.next = 17;\\n                break;\\n\\n              case 16:\\n                this.setLoading(false);\\n\\n              case 17:\\n              case \\\"end\\\":\\n                return _context14.stop();\\n            }\\n          }\\n        }, _callee14, this);\\n      }));\\n\\n      function onMountPaymentAgentWithdraw() {\\n        return _onMountPaymentAgentWithdraw.apply(this, arguments);\\n      }\\n\\n      return onMountPaymentAgentWithdraw;\\n    }()\\n  }, {\\n    key: \\\"setIsWithdraw\\\",\\n    value: function setIsWithdraw() {\\n      var is_withdraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.config.payment_agent.is_withdraw;\\n      this.config.payment_agent.is_withdraw = is_withdraw;\\n    }\\n  }, {\\n    key: \\\"setIsTryWithdrawSuccessful\\\",\\n    value: function setIsTryWithdrawSuccessful(is_try_withdraw_successful) {\\n      this.setErrorMessage('');\\n      this.config.payment_agent.is_try_withdraw_successful = is_try_withdraw_successful;\\n    }\\n  }, {\\n    key: \\\"setIsWithdrawSuccessful\\\",\\n    value: function setIsWithdrawSuccessful(is_withdraw_successful) {\\n      this.config.payment_agent.is_withdraw_successful = is_withdraw_successful;\\n    }\\n  }, {\\n    key: \\\"setConfirmation\\\",\\n    value: function setConfirmation(_ref12) {\\n      var amount = _ref12.amount,\\n          currency = _ref12.currency,\\n          loginid = _ref12.loginid,\\n          payment_agent_name = _ref12.payment_agent_name;\\n      this.config.payment_agent.confirm = {\\n        amount: amount,\\n        currency: currency,\\n        loginid: loginid,\\n        payment_agent_name: payment_agent_name\\n      };\\n    }\\n  }, {\\n    key: \\\"setReceipt\\\",\\n    value: function setReceipt(_ref13) {\\n      var amount_transferred = _ref13.amount_transferred,\\n          payment_agent_email = _ref13.payment_agent_email,\\n          payment_agent_id = _ref13.payment_agent_id,\\n          payment_agent_name = _ref13.payment_agent_name,\\n          payment_agent_phone = _ref13.payment_agent_phone,\\n          payment_agent_url = _ref13.payment_agent_url;\\n      this.config.payment_agent.receipt = {\\n        amount_transferred: amount_transferred,\\n        payment_agent_email: payment_agent_email,\\n        payment_agent_id: payment_agent_id,\\n        payment_agent_name: payment_agent_name,\\n        payment_agent_phone: payment_agent_phone,\\n        payment_agent_url: payment_agent_url\\n      };\\n    }\\n  }, {\\n    key: \\\"addPaymentAgent\\\",\\n    value: function addPaymentAgent(payment_agent) {\\n      this.config.payment_agent.agents.push({\\n        text: payment_agent.name,\\n        value: payment_agent.paymentagent_loginid,\\n        max_withdrawal: payment_agent.max_withdrawal,\\n        min_withdrawal: payment_agent.min_withdrawal,\\n        email: payment_agent.email,\\n        phone: payment_agent.telephone,\\n        url: payment_agent.url\\n      });\\n    }\\n  }, {\\n    key: \\\"requestTryPaymentAgentWithdraw\\\",\\n    value: function () {\\n      var _requestTryPaymentAgentWithdraw = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(_ref14) {\\n        var loginid, currency, amount, verification_code, payment_agent_withdraw, selected_agent;\\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\\n          while (1) {\\n            switch (_context15.prev = _context15.next) {\\n              case 0:\\n                loginid = _ref14.loginid, currency = _ref14.currency, amount = _ref14.amount, verification_code = _ref14.verification_code;\\n                this.setErrorMessage('');\\n                _context15.next = 4;\\n                return this.WS.authorized.paymentAgentWithdraw({\\n                  loginid: loginid,\\n                  currency: currency,\\n                  amount: amount,\\n                  verification_code: verification_code,\\n                  dry_run: 1\\n                });\\n\\n              case 4:\\n                payment_agent_withdraw = _context15.sent;\\n\\n                if (+payment_agent_withdraw.paymentagent_withdraw === 2) {\\n                  selected_agent = this.config.payment_agent.agents.find(function (agent) {\\n                    return agent.value === loginid;\\n                  });\\n                  this.setConfirmation(cashier_store_objectSpread({\\n                    amount: amount,\\n                    currency: currency,\\n                    loginid: loginid\\n                  }, selected_agent && {\\n                    payment_agent_name: selected_agent.text\\n                  }));\\n                  this.setIsTryWithdrawSuccessful(true);\\n                } else {\\n                  this.setErrorMessage(payment_agent_withdraw.error, this.resetPaymentAgent);\\n                }\\n\\n              case 6:\\n              case \\\"end\\\":\\n                return _context15.stop();\\n            }\\n          }\\n        }, _callee15, this);\\n      }));\\n\\n      function requestTryPaymentAgentWithdraw(_x6) {\\n        return _requestTryPaymentAgentWithdraw.apply(this, arguments);\\n      }\\n\\n      return requestTryPaymentAgentWithdraw;\\n    }()\\n  }, {\\n    key: \\\"requestPaymentAgentWithdraw\\\",\\n    value: function () {\\n      var _requestPaymentAgentWithdraw = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(_ref15) {\\n        var loginid, currency, amount, verification_code, payment_agent_withdraw, selected_agent;\\n        return regeneratorRuntime.wrap(function _callee16$(_context16) {\\n          while (1) {\\n            switch (_context16.prev = _context16.next) {\\n              case 0:\\n                loginid = _ref15.loginid, currency = _ref15.currency, amount = _ref15.amount, verification_code = _ref15.verification_code;\\n                this.setErrorMessage('');\\n                _context16.next = 4;\\n                return this.WS.authorized.paymentAgentWithdraw({\\n                  loginid: loginid,\\n                  currency: currency,\\n                  amount: amount,\\n                  verification_code: verification_code\\n                });\\n\\n              case 4:\\n                payment_agent_withdraw = _context16.sent;\\n\\n                if (+payment_agent_withdraw.paymentagent_withdraw === 1) {\\n                  selected_agent = this.config.payment_agent.agents.find(function (agent) {\\n                    return agent.value === loginid;\\n                  });\\n                  this.setReceipt(cashier_store_objectSpread(cashier_store_objectSpread({\\n                    amount_transferred: (0,shared_.formatMoney)(currency, amount, true)\\n                  }, selected_agent && {\\n                    payment_agent_email: selected_agent.email,\\n                    payment_agent_id: selected_agent.value,\\n                    payment_agent_name: selected_agent.text,\\n                    payment_agent_phone: selected_agent.phone,\\n                    payment_agent_url: selected_agent.url\\n                  }), !selected_agent && {\\n                    payment_agent_id: loginid\\n                  }));\\n                  this.setIsWithdrawSuccessful(true);\\n                  this.setIsTryWithdrawSuccessful(false);\\n                  this.setConfirmation({});\\n                } else {\\n                  this.setErrorMessage(payment_agent_withdraw.error, this.resetPaymentAgent);\\n                }\\n\\n              case 6:\\n              case \\\"end\\\":\\n                return _context16.stop();\\n            }\\n          }\\n        }, _callee16, this);\\n      }));\\n\\n      function requestPaymentAgentWithdraw(_x7) {\\n        return _requestPaymentAgentWithdraw.apply(this, arguments);\\n      }\\n\\n      return requestPaymentAgentWithdraw;\\n    }()\\n  }, {\\n    key: \\\"onMountAccountTransfer\\\",\\n    value: // possible transfers:\\n    // 1. fiat to crypto & vice versa\\n    // 2. fiat to mt & vice versa\\n    // 3. crypto to mt & vice versa\\n    function () {\\n      var _onMountAccountTransfer = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {\\n        var _this11 = this;\\n\\n        var has_updated_account_balance, _this$config$account_, transfer_between_accounts, cfd_transfer_to_login_id, obj_values;\\n\\n        return regeneratorRuntime.wrap(function _callee17$(_context17) {\\n          while (1) {\\n            switch (_context17.prev = _context17.next) {\\n              case 0:\\n                this.setLoading(true);\\n                this.onRemount = this.onMountAccountTransfer;\\n                _context17.next = 4;\\n                return this.onMountCommon();\\n\\n              case 4:\\n                _context17.next = 6;\\n                return this.WS.wait('website_status');\\n\\n              case 6:\\n                // check if some balance update has come in since the last mount\\n                has_updated_account_balance = this.config.account_transfer.has_no_accounts_balance && Object.keys(this.root_store.client.active_accounts).find(function (account) {\\n                  return !_this11.root_store.client.active_accounts[account].is_virtual && _this11.root_store.client.active_accounts[account].balance;\\n                });\\n\\n                if (has_updated_account_balance) {\\n                  this.setHasNoAccountsBalance(false);\\n                } // various issues happen when loading from cache\\n                // e.g. new account may have been created, transfer may have been done elsewhere, etc\\n                // so on load of this page just call it again\\n\\n\\n                if (!this.root_store.client.is_logged_in) {\\n                  _context17.next = 24;\\n                  break;\\n                }\\n\\n                _context17.next = 11;\\n                return this.WS.authorized.transferBetweenAccounts();\\n\\n              case 11:\\n                transfer_between_accounts = _context17.sent;\\n\\n                if (!transfer_between_accounts.error) {\\n                  _context17.next = 16;\\n                  break;\\n                }\\n\\n                this.setErrorMessage(transfer_between_accounts.error, this.onMountAccountTransfer);\\n                this.setLoading(false);\\n                return _context17.abrupt(\\\"return\\\");\\n\\n              case 16:\\n                if (this.canDoAccountTransfer(transfer_between_accounts.accounts)) {\\n                  _context17.next = 18;\\n                  break;\\n                }\\n\\n                return _context17.abrupt(\\\"return\\\");\\n\\n              case 18:\\n                _context17.next = 20;\\n                return this.sortAccountsTransfer(transfer_between_accounts);\\n\\n              case 20:\\n                this.setTransferFee();\\n                this.setMinimumFee();\\n                this.setTransferLimit();\\n\\n                if (((_this$config$account_ = this.config.account_transfer.accounts_list) === null || _this$config$account_ === void 0 ? void 0 : _this$config$account_.length) > 0) {\\n                  cfd_transfer_to_login_id = sessionStorage.getItem('cfd_transfer_to_login_id');\\n                  sessionStorage.removeItem('cfd_transfer_to_login_id');\\n                  obj_values = this.config.account_transfer.accounts_list.find(function (account) {\\n                    return account.value === cfd_transfer_to_login_id;\\n                  });\\n\\n                  if (obj_values) {\\n                    if (hasTransferNotAllowedLoginid(obj_values.value)) {\\n                      // check if selected to is not allowed account\\n                      obj_values.error = getSelectedError(obj_values.value);\\n                    }\\n\\n                    this.setSelectedTo(obj_values);\\n                  }\\n                }\\n\\n              case 24:\\n                this.setLoading(false);\\n\\n              case 25:\\n              case \\\"end\\\":\\n                return _context17.stop();\\n            }\\n          }\\n        }, _callee17, this);\\n      }));\\n\\n      function onMountAccountTransfer() {\\n        return _onMountAccountTransfer.apply(this, arguments);\\n      }\\n\\n      return onMountAccountTransfer;\\n    }()\\n  }, {\\n    key: \\\"canDoAccountTransfer\\\",\\n    value: function canDoAccountTransfer(accounts) {\\n      var can_transfer = true; // should have at least one account with balance\\n\\n      if (!accounts.find(function (account) {\\n        return +account.balance > 0;\\n      })) {\\n        can_transfer = false;\\n        this.setHasNoAccountsBalance(true);\\n      } else {\\n        this.setHasNoAccountsBalance(false);\\n      } // should have at least two real-money accounts\\n\\n\\n      if (accounts.length <= 1) {\\n        can_transfer = false;\\n        this.setHasNoAccount(true);\\n      } else {\\n        this.setHasNoAccount(false);\\n      }\\n\\n      if (!can_transfer) {\\n        this.setLoading(false);\\n      }\\n\\n      return can_transfer;\\n    }\\n  }, {\\n    key: \\\"setHasNoAccountsBalance\\\",\\n    value: function setHasNoAccountsBalance(has_no_accounts_balance) {\\n      this.config.account_transfer.has_no_accounts_balance = has_no_accounts_balance;\\n    }\\n  }, {\\n    key: \\\"setHasNoAccount\\\",\\n    value: function setHasNoAccount(has_no_account) {\\n      this.config.account_transfer.has_no_account = has_no_account;\\n    }\\n  }, {\\n    key: \\\"setTransferFee\\\",\\n    value: function setTransferFee() {\\n      var transfer_fee = (0,shared_.getPropertyValue)((0,shared_.getCurrencies)(), [this.config.account_transfer.selected_from.currency, 'transfer_between_accounts', 'fees', this.config.account_transfer.selected_to.currency]);\\n      this.config.account_transfer.transfer_fee = typeof transfer_fee === 'undefined' ? 1 : +transfer_fee;\\n    }\\n  }, {\\n    key: \\\"setMinimumFee\\\",\\n    value: function setMinimumFee() {\\n      var decimals = (0,shared_.getDecimalPlaces)(this.config.account_transfer.selected_from.currency); // we need .toFixed() so that it doesn't display in scientific notation, e.g. 1e-8 for currencies with 8 decimal places\\n\\n      this.config.account_transfer.minimum_fee = (1 / Math.pow(10, decimals)).toFixed(decimals);\\n    }\\n  }, {\\n    key: \\\"setTransferLimit\\\",\\n    value: function setTransferLimit() {\\n      var is_mt_transfer = this.config.account_transfer.selected_from.is_mt || this.config.account_transfer.selected_to.is_mt;\\n      var is_dxtrade_transfer = this.config.account_transfer.selected_from.is_dxtrade || this.config.account_transfer.selected_to.is_dxtrade;\\n      var limits_key;\\n\\n      if (is_mt_transfer) {\\n        limits_key = 'limits_mt5';\\n      } else if (is_dxtrade_transfer) {\\n        limits_key = 'limits_dxtrade';\\n      } else {\\n        limits_key = 'limits';\\n      }\\n\\n      var transfer_limit = (0,shared_.getPropertyValue)((0,shared_.getCurrencies)(), [this.config.account_transfer.selected_from.currency, 'transfer_between_accounts', limits_key]);\\n      var balance = this.config.account_transfer.selected_from.balance;\\n      var decimal_places = (0,shared_.getDecimalPlaces)(this.config.account_transfer.selected_from.currency); // we need .toFixed() so that it doesn't display in scientific notation, e.g. 1e-8 for currencies with 8 decimal places\\n\\n      this.config.account_transfer.transfer_limit = {\\n        max: !(transfer_limit !== null && transfer_limit !== void 0 && transfer_limit.max) || +balance >= ((transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.min) || 0) && +balance <= (transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.max) ? balance : transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.max.toFixed(decimal_places),\\n        min: transfer_limit !== null && transfer_limit !== void 0 && transfer_limit.min ? (+(transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.min)).toFixed(decimal_places) : null\\n      };\\n    }\\n  }, {\\n    key: \\\"sortAccountsTransfer\\\",\\n    value: function () {\\n      var _sortAccountsTransfer = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(response_accounts) {\\n        var _yield$this$WS$storag,\\n            _yield$this$WS$tradin,\\n            _this12 = this;\\n\\n        var transfer_between_accounts, mt5_login_list, dxtrade_accounts_list, accounts, arr_accounts;\\n        return regeneratorRuntime.wrap(function _callee18$(_context18) {\\n          while (1) {\\n            switch (_context18.prev = _context18.next) {\\n              case 0:\\n                _context18.t0 = response_accounts;\\n\\n                if (_context18.t0) {\\n                  _context18.next = 5;\\n                  break;\\n                }\\n\\n                _context18.next = 4;\\n                return this.WS.authorized.transferBetweenAccounts();\\n\\n              case 4:\\n                _context18.t0 = _context18.sent;\\n\\n              case 5:\\n                transfer_between_accounts = _context18.t0;\\n\\n                if (this.config.account_transfer.accounts_list.length) {\\n                  _context18.next = 9;\\n                  break;\\n                }\\n\\n                if (!transfer_between_accounts.error) {\\n                  _context18.next = 9;\\n                  break;\\n                }\\n\\n                return _context18.abrupt(\\\"return\\\");\\n\\n              case 9:\\n                _context18.next = 11;\\n                return this.WS.storage.mt5LoginList();\\n\\n              case 11:\\n                _context18.t2 = _yield$this$WS$storag = _context18.sent;\\n                _context18.t1 = _context18.t2 === null;\\n\\n                if (_context18.t1) {\\n                  _context18.next = 15;\\n                  break;\\n                }\\n\\n                _context18.t1 = _yield$this$WS$storag === void 0;\\n\\n              case 15:\\n                if (!_context18.t1) {\\n                  _context18.next = 19;\\n                  break;\\n                }\\n\\n                _context18.t3 = void 0;\\n                _context18.next = 20;\\n                break;\\n\\n              case 19:\\n                _context18.t3 = _yield$this$WS$storag.mt5_login_list;\\n\\n              case 20:\\n                mt5_login_list = _context18.t3;\\n                _context18.next = 23;\\n                return this.WS.tradingPlatformAccountsList(shared_.CFD_PLATFORMS.DXTRADE);\\n\\n              case 23:\\n                _context18.t5 = _yield$this$WS$tradin = _context18.sent;\\n                _context18.t4 = _context18.t5 === null;\\n\\n                if (_context18.t4) {\\n                  _context18.next = 27;\\n                  break;\\n                }\\n\\n                _context18.t4 = _yield$this$WS$tradin === void 0;\\n\\n              case 27:\\n                if (!_context18.t4) {\\n                  _context18.next = 31;\\n                  break;\\n                }\\n\\n                _context18.t6 = void 0;\\n                _context18.next = 32;\\n                break;\\n\\n              case 31:\\n                _context18.t6 = _yield$this$WS$tradin.trading_platform_accounts;\\n\\n              case 32:\\n                dxtrade_accounts_list = _context18.t6;\\n                // TODO: remove this temporary mapping when API adds market_type and sub_account_type to transfer_between_accounts\\n                accounts = transfer_between_accounts.accounts.map(function (account) {\\n                  if (account.account_type === shared_.CFD_PLATFORMS.MT5 && Array.isArray(mt5_login_list) && mt5_login_list.length) {\\n                    // account_type in transfer_between_accounts (mt5|binary)\\n                    // gets overridden by account_type in mt5_login_list (demo|real)\\n                    // since in cashier all these are real accounts, the mt5 account type is what we want to keep\\n                    var found_account = mt5_login_list.find(function (acc) {\\n                      return acc.login === account.loginid;\\n                    });\\n                    if (found_account === undefined) return account;\\n                    return cashier_store_objectSpread(cashier_store_objectSpread(cashier_store_objectSpread({}, account), found_account), {}, {\\n                      account_type: shared_.CFD_PLATFORMS.MT5\\n                    });\\n                  }\\n\\n                  if (account.account_type === shared_.CFD_PLATFORMS.DXTRADE && Array.isArray(dxtrade_accounts_list) && dxtrade_accounts_list.length) {\\n                    // account_type in transfer_between_accounts (mt5|binary)\\n                    // gets overridden by account_type in dxtrade_accounts_list (demo|real)\\n                    // since in cashier all these are real accounts, the mt5 account type is what we want to keep\\n                    var _found_account = dxtrade_accounts_list.find(function (acc) {\\n                      return acc.account_id === account.loginid;\\n                    });\\n\\n                    if (_found_account === undefined) return account;\\n                    return cashier_store_objectSpread(cashier_store_objectSpread(cashier_store_objectSpread({}, account), _found_account), {}, {\\n                      account_type: shared_.CFD_PLATFORMS.DXTRADE\\n                    });\\n                  }\\n\\n                  return account;\\n                }); // sort accounts as follows:\\n                // for MT5, synthetic, financial, financial stp\\n                // for non-MT5, fiat, crypto (alphabetically by currency)\\n                // should have more than one account\\n\\n                if (transfer_between_accounts.accounts.length > 1) {\\n                  accounts.sort(function (a, b) {\\n                    var a_is_mt = a.account_type === shared_.CFD_PLATFORMS.MT5;\\n                    var b_is_mt = b.account_type === shared_.CFD_PLATFORMS.MT5;\\n                    var a_is_crypto = !a_is_mt && (0,shared_.isCryptocurrency)(a.currency);\\n                    var b_is_crypto = !b_is_mt && (0,shared_.isCryptocurrency)(b.currency);\\n                    var a_is_fiat = !a_is_mt && !a_is_crypto;\\n                    var b_is_fiat = !b_is_mt && !b_is_crypto;\\n\\n                    if (a_is_mt && b_is_mt) {\\n                      if (a.market_type === 'gaming' || a.market_type === 'synthetic') {\\n                        return -1;\\n                      }\\n\\n                      if (a.sub_account_type === 'financial') {\\n                        return b.market_type === 'gaming' || b.market_type === 'synthetic' ? 1 : -1;\\n                      }\\n\\n                      return 1;\\n                    } else if (a_is_crypto && b_is_crypto || a_is_fiat && b_is_fiat) {\\n                      return a.currency < b.currency ? -1 : 1;\\n                    } else if (a_is_crypto && b_is_mt || a_is_fiat && b_is_crypto || a_is_fiat && b_is_mt) {\\n                      return -1;\\n                    }\\n\\n                    return a_is_mt ? -1 : 1;\\n                  });\\n                }\\n\\n                arr_accounts = [];\\n                this.setSelectedTo({}); // set selected to empty each time so we can redetermine its value on reload\\n\\n                accounts.forEach(function (account) {\\n                  var _cfd_platforms$accoun, _cfd_platforms$accoun2;\\n\\n                  var cfd_platforms = {\\n                    mt5: {\\n                      name: 'DMT5',\\n                      icon: 'IcMt5'\\n                    },\\n                    dxtrade: {\\n                      name: 'Deriv X',\\n                      icon: 'IcDxtrade'\\n                    }\\n                  };\\n                  var is_cfd = Object.keys(cfd_platforms).includes(account.account_type);\\n                  var cfd_text_display = (_cfd_platforms$accoun = cfd_platforms[account.account_type]) === null || _cfd_platforms$accoun === void 0 ? void 0 : _cfd_platforms$accoun.name;\\n                  var cfd_icon_display = \\\"\\\".concat((_cfd_platforms$accoun2 = cfd_platforms[account.account_type]) === null || _cfd_platforms$accoun2 === void 0 ? void 0 : _cfd_platforms$accoun2.icon, \\\"-\\\").concat((0,shared_.getCFDAccount)({\\n                    market_type: account.market_type,\\n                    sub_account_type: account.sub_account_type,\\n                    platform: account.account_type\\n                  }));\\n                  var account_text_display = is_cfd ? \\\"\\\".concat(cfd_text_display, \\\" \\\").concat((0,shared_.getCFDAccountDisplay)({\\n                    market_type: account.market_type,\\n                    sub_account_type: account.sub_account_type,\\n                    platform: account.account_type\\n                  })) : (0,shared_.getCurrencyDisplayCode)(account.currency !== 'eUSDT' ? account.currency.toUpperCase() : account.currency);\\n\\n                  var obj_values = cashier_store_objectSpread({\\n                    text: account_text_display,\\n                    value: account.loginid,\\n                    balance: account.balance,\\n                    currency: account.currency,\\n                    is_crypto: (0,shared_.isCryptocurrency)(account.currency),\\n                    is_mt: account.account_type === shared_.CFD_PLATFORMS.MT5,\\n                    is_dxtrade: account.account_type === shared_.CFD_PLATFORMS.DXTRADE\\n                  }, is_cfd && {\\n                    platform_icon: cfd_icon_display,\\n                    market_type: (0,shared_.getCFDAccount)({\\n                      market_type: account.market_type,\\n                      sub_account_type: account.sub_account_type,\\n                      platform: account.account_type\\n                    })\\n                  }); // set current logged in client as the default transfer from account\\n\\n\\n                  if (account.loginid === _this12.root_store.client.loginid) {\\n                    // check if selected from is not allowed account\\n                    if (hasTransferNotAllowedLoginid(obj_values.value)) {\\n                      obj_values.error = getSelectedError(obj_values.value, true);\\n                    }\\n\\n                    _this12.setSelectedFrom(obj_values);\\n                  } else if ((0,shared_.isEmptyObject)(_this12.config.account_transfer.selected_to)) {\\n                    if (hasTransferNotAllowedLoginid(obj_values.value)) {\\n                      // check if selected to is not allowed account\\n                      obj_values.error = getSelectedError(obj_values.value);\\n                    } // set the first available account as the default transfer to account\\n\\n\\n                    _this12.setSelectedTo(obj_values);\\n                  }\\n\\n                  arr_accounts.push(obj_values);\\n                });\\n                this.setAccounts(arr_accounts);\\n\\n              case 39:\\n              case \\\"end\\\":\\n                return _context18.stop();\\n            }\\n          }\\n        }, _callee18, this);\\n      }));\\n\\n      function sortAccountsTransfer(_x8) {\\n        return _sortAccountsTransfer.apply(this, arguments);\\n      }\\n\\n      return sortAccountsTransfer;\\n    }()\\n  }, {\\n    key: \\\"setSelectedFrom\\\",\\n    value: function setSelectedFrom(obj_values) {\\n      this.config.account_transfer.selected_from = obj_values;\\n    }\\n  }, {\\n    key: \\\"setSelectedTo\\\",\\n    value: function setSelectedTo(obj_values) {\\n      this.config.account_transfer.selected_to = obj_values;\\n    }\\n  }, {\\n    key: \\\"setAccounts\\\",\\n    value: function setAccounts(arr_accounts) {\\n      this.config.account_transfer.accounts_list = arr_accounts;\\n    }\\n  }, {\\n    key: \\\"setIsTryTransferSuccessful\\\",\\n    value: function setIsTryTransferSuccessful(is_try_transfer_successful) {\\n      this.setErrorMessage('');\\n      this.config[this.active_container].is_try_transfer_successful = is_try_transfer_successful;\\n    }\\n  }, {\\n    key: \\\"setIsTransferConfirm\\\",\\n    value: function setIsTransferConfirm(is_transfer_confirm) {\\n      this.config[this.active_container].is_transfer_confirm = is_transfer_confirm;\\n    }\\n  }, {\\n    key: \\\"setAccountTransferAmount\\\",\\n    value: function setAccountTransferAmount(amount) {\\n      this.config[this.active_container].account_transfer_amount = amount;\\n    }\\n  }, {\\n    key: \\\"setIsTransferSuccessful\\\",\\n    value: function setIsTransferSuccessful(is_transfer_successful) {\\n      this.config[this.active_container].is_transfer_successful = is_transfer_successful;\\n    }\\n  }, {\\n    key: \\\"setIsMT5TransferInProgress\\\",\\n    value: function setIsMT5TransferInProgress(is_mt5_transfer_in_progress) {\\n      this.config[this.active_container].is_mt5_transfer_in_progress = is_mt5_transfer_in_progress;\\n    }\\n  }, {\\n    key: \\\"isMT5TransferInProgress\\\",\\n    value: function isMT5TransferInProgress() {\\n      var _this$config$this$act2;\\n\\n      return (_this$config$this$act2 = this.config[this.active_container]) === null || _this$config$this$act2 === void 0 ? void 0 : _this$config$this$act2.is_mt5_transfer_in_progress;\\n    }\\n  }, {\\n    key: \\\"setReceiptTransfer\\\",\\n    value: function setReceiptTransfer(_ref16) {\\n      var amount = _ref16.amount;\\n      this.config.account_transfer.receipt = {\\n        amount_transferred: amount\\n      };\\n    }\\n  }, {\\n    key: \\\"onChangeTransferFrom\\\",\\n    value: function onChangeTransferFrom(_ref17) {\\n      var target = _ref17.target;\\n      this.setErrorMessage('');\\n      this.config.account_transfer.selected_from.error = '';\\n      var accounts = this.config.account_transfer.accounts_list;\\n      var selected_from = accounts.find(function (account) {\\n        return account.value === target.value;\\n      }); // if new value of selected_from is the same as the current selected_to\\n      // switch the value of selected_from and selected_to\\n\\n      if (selected_from.value === this.config.account_transfer.selected_to.value) {\\n        this.onChangeTransferTo({\\n          target: {\\n            value: this.config.account_transfer.selected_from.value\\n          }\\n        });\\n      } else if (selected_from.is_mt && this.config.account_transfer.selected_to.is_mt || selected_from.is_dxtrade && this.config.account_transfer.selected_to.is_dxtrade || selected_from.is_dxtrade && this.config.account_transfer.selected_to.is_mt || selected_from.is_mt && this.config.account_transfer.selected_to.is_dxtrade) {\\n        // not allowed to transfer from MT to MT\\n        // not allowed to transfer from Dxtrade to Dxtrade\\n        // not allowed to transfer between MT and Dxtrade\\n        var first_non_cfd = this.config.account_transfer.accounts_list.find(function (account) {\\n          return !account.is_mt && !account.is_dxtrade;\\n        });\\n        this.onChangeTransferTo({\\n          target: {\\n            value: first_non_cfd.value\\n          }\\n        });\\n      } else if (selected_from.is_crypto && this.config.account_transfer.selected_to.is_crypto) {\\n        // not allowed to transfer crypto to crypto\\n        var first_fiat = this.config.account_transfer.accounts_list.find(function (account) {\\n          return !account.is_crypto;\\n        });\\n        this.onChangeTransferTo({\\n          target: {\\n            value: first_fiat.value\\n          }\\n        });\\n      }\\n\\n      if (hasTransferNotAllowedLoginid(selected_from.value)) {\\n        selected_from.error = getSelectedError(selected_from.value, true);\\n      }\\n\\n      this.config.account_transfer.selected_from = selected_from;\\n      this.setTransferFee();\\n      this.setMinimumFee();\\n      this.setTransferLimit();\\n    }\\n  }, {\\n    key: \\\"onChangeTransferTo\\\",\\n    value: function onChangeTransferTo(_ref18) {\\n      var target = _ref18.target;\\n      this.setErrorMessage('');\\n      this.config.account_transfer.selected_to.error = '';\\n      var accounts = this.config.account_transfer.accounts_list;\\n      this.config.account_transfer.selected_to = accounts.find(function (account) {\\n        return account.value === target.value;\\n      }) || {};\\n\\n      if (hasTransferNotAllowedLoginid(this.config.account_transfer.selected_to.value)) {\\n        this.config.account_transfer.selected_to.error = getSelectedError(this.config.account_transfer.selected_to.value);\\n      }\\n\\n      this.setTransferFee();\\n      this.setTransferLimit();\\n    }\\n  }, {\\n    key: \\\"onMountPaymentAgentTransfer\\\",\\n    value: function () {\\n      var _onMountPaymentAgentTransfer = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {\\n        var response, current_payment_agent;\\n        return regeneratorRuntime.wrap(function _callee19$(_context19) {\\n          while (1) {\\n            switch (_context19.prev = _context19.next) {\\n              case 0:\\n                this.setLoading(true);\\n                this.onRemount = this.onMountPaymentAgentTransfer;\\n                _context19.next = 4;\\n                return this.onMountCommon();\\n\\n              case 4:\\n                if (this.config.payment_agent_transfer.transfer_limit.min_withdrawal) {\\n                  _context19.next = 10;\\n                  break;\\n                }\\n\\n                _context19.next = 7;\\n                return this.getPaymentAgentList();\\n\\n              case 7:\\n                response = _context19.sent;\\n                current_payment_agent = this.getCurrentPaymentAgent(response);\\n                this.setMinMaxPaymentAgentTransfer(current_payment_agent);\\n\\n              case 10:\\n                this.setLoading(false);\\n\\n              case 11:\\n              case \\\"end\\\":\\n                return _context19.stop();\\n            }\\n          }\\n        }, _callee19, this);\\n      }));\\n\\n      function onMountPaymentAgentTransfer() {\\n        return _onMountPaymentAgentTransfer.apply(this, arguments);\\n      }\\n\\n      return onMountPaymentAgentTransfer;\\n    }()\\n  }, {\\n    key: \\\"getCurrentPaymentAgent\\\",\\n    value: function getCurrentPaymentAgent(response_payment_agent) {\\n      var _this13 = this;\\n\\n      return response_payment_agent.paymentagent_list.list.find(function (agent) {\\n        return agent.paymentagent_loginid === _this13.root_store.client.loginid;\\n      }) || {};\\n    }\\n  }, {\\n    key: \\\"checkIsPaymentAgent\\\",\\n    value: function () {\\n      var _checkIsPaymentAgent = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {\\n        var _get_settings$is_auth;\\n\\n        var get_settings;\\n        return regeneratorRuntime.wrap(function _callee20$(_context20) {\\n          while (1) {\\n            switch (_context20.prev = _context20.next) {\\n              case 0:\\n                _context20.next = 2;\\n                return this.WS.authorized.storage.getSettings();\\n\\n              case 2:\\n                get_settings = _context20.sent.get_settings;\\n                this.setIsPaymentAgent((_get_settings$is_auth = get_settings === null || get_settings === void 0 ? void 0 : get_settings.is_authenticated_payment_agent) !== null && _get_settings$is_auth !== void 0 ? _get_settings$is_auth : false);\\n\\n              case 4:\\n              case \\\"end\\\":\\n                return _context20.stop();\\n            }\\n          }\\n        }, _callee20, this);\\n      }));\\n\\n      function checkIsPaymentAgent() {\\n        return _checkIsPaymentAgent.apply(this, arguments);\\n      }\\n\\n      return checkIsPaymentAgent;\\n    }()\\n  }, {\\n    key: \\\"setIsPaymentAgent\\\",\\n    value: function setIsPaymentAgent(is_payment_agent) {\\n      if (!is_payment_agent && window.location.pathname.endsWith(shared_.routes.cashier_pa_transfer)) {\\n        this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n      }\\n\\n      this.config.payment_agent_transfer.is_payment_agent = !!is_payment_agent;\\n    }\\n  }, {\\n    key: \\\"setMinMaxPaymentAgentTransfer\\\",\\n    value: function setMinMaxPaymentAgentTransfer(_ref19) {\\n      var min_withdrawal = _ref19.min_withdrawal,\\n          max_withdrawal = _ref19.max_withdrawal;\\n      this.config.payment_agent_transfer.transfer_limit = {\\n        min: min_withdrawal,\\n        max: max_withdrawal\\n      };\\n    }\\n  }, {\\n    key: \\\"setConfirmationPaymentAgentTransfer\\\",\\n    value: function setConfirmationPaymentAgentTransfer(_ref20) {\\n      var amount = _ref20.amount,\\n          client_id = _ref20.client_id,\\n          client_name = _ref20.client_name,\\n          description = _ref20.description;\\n      this.config.payment_agent_transfer.confirm = {\\n        amount: amount,\\n        client_id: client_id,\\n        client_name: client_name,\\n        description: description\\n      };\\n    }\\n  }, {\\n    key: \\\"setReceiptPaymentAgentTransfer\\\",\\n    value: function setReceiptPaymentAgentTransfer(_ref21) {\\n      var amount_transferred = _ref21.amount_transferred,\\n          client_id = _ref21.client_id,\\n          client_name = _ref21.client_name;\\n      this.config.payment_agent_transfer.receipt = {\\n        amount_transferred: amount_transferred,\\n        client_id: client_id,\\n        client_name: client_name\\n      };\\n    }\\n  }, {\\n    key: \\\"accountSwitcherListener\\\",\\n    value: function accountSwitcherListener() {\\n      var _this14 = this;\\n\\n      [this.config.withdraw.container, this.config.payment_agent.container].forEach(function (container) {\\n        _this14.clearVerification(container);\\n      });\\n      [this.config.deposit.container, this.config.withdraw.container].forEach(function (container) {\\n        _this14.setIframeUrl('', container);\\n\\n        _this14.clearTimeoutCashierUrl(container);\\n\\n        _this14.setSessionTimeout(true, container);\\n      });\\n      this.config.payment_agent = new ConfigPaymentAgent();\\n      this.config.account_transfer = new ConfigAccountTransfer();\\n      this.config.payment_agent_transfer = new ConfigPaymentAgentTransfer();\\n      this.is_populating_values = false;\\n      this.onRemount();\\n      return Promise.resolve();\\n    }\\n  }]);\\n\\n  return CashierStore;\\n}(BaseStore), _temp7), (_descriptor53 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_loading\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor54 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_p2p_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor55 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"p2p_notification_count\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _descriptor56 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"cashier_route_tab_index\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _descriptor57 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_10k_withdrawal_limit_reached\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return undefined;\\n  }\\n}), _descriptor58 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_deposit\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor59 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_cashier_default\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), _descriptor60 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"config\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {\\n      account_transfer: new ConfigAccountTransfer(),\\n      deposit: cashier_store_objectSpread(cashier_store_objectSpread({}, (0,external_mobx_.toJS)(new Config({\\n        container: 'deposit'\\n      }))), {}, {\\n        error: new ConfigError()\\n      }),\\n      payment_agent: new ConfigPaymentAgent(),\\n      payment_agent_transfer: new ConfigPaymentAgentTransfer(),\\n      withdraw: cashier_store_objectSpread(cashier_store_objectSpread({}, (0,external_mobx_.toJS)(new Config({\\n        container: 'withdraw'\\n      }))), {}, {\\n        error: new ConfigError(),\\n        verification: new ConfigVerification()\\n      })\\n    };\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_payment_agent_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"is_payment_agent_visible\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_payment_agent_transfer_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"is_payment_agent_transfer_visible\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_account_transfer_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"is_account_transfer_visible\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_p2p_enabled\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"is_p2p_enabled\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setIsDeposit\\\", [cashier_store_dec5], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setIsDeposit\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setIsCashierDefault\\\", [cashier_store_dec6], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setIsCashierDefault\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setAccountSwitchListener\\\", [cashier_store_dec7], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setAccountSwitchListener\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"init\\\", [cashier_store_dec8], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"init\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"checkP2pStatus\\\", [cashier_store_dec9], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"checkP2pStatus\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"onMountCommon\\\", [cashier_store_dec10], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"onMountCommon\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setCashierTabIndex\\\", [cashier_store_dec11], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setCashierTabIndex\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"onMountDeposit\\\", [cashier_store_dec12], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"onMountDeposit\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setNotificationCount\\\", [cashier_store_dec13], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setNotificationCount\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setIsP2pVisible\\\", [cashier_store_dec14], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setIsP2pVisible\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"onMount\\\", [cashier_store_dec15], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"onMount\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_cashier_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"is_cashier_locked\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_deposit_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"is_deposit_locked\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_withdrawal_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"is_withdrawal_locked\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_transfer_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"is_transfer_locked\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"check10kLimit\\\", [cashier_store_dec16], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"check10kLimit\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"set10kLimitation\\\", [cashier_store_dec17], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"set10kLimitation\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"checkIframeLoaded\\\", [cashier_store_dec18], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"checkIframeLoaded\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setIframeUrl\\\", [cashier_store_dec19], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setIframeUrl\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setContainerHeight\\\", [cashier_store_dec20], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setContainerHeight\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setErrorMessage\\\", [cashier_store_dec21], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setErrorMessage\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"handleCashierError\\\", [cashier_store_dec22], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"handleCashierError\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setErrorConfig\\\", [_dec23], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setErrorConfig\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"submitFundsProtection\\\", [_dec24], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"submitFundsProtection\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setLoading\\\", [_dec25], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setLoading\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setSessionTimeout\\\", [_dec26], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setSessionTimeout\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setVerificationButtonClicked\\\", [_dec27], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setVerificationButtonClicked\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setVerificationEmailSent\\\", [_dec28], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setVerificationEmailSent\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setVerificationResendClicked\\\", [_dec29], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setVerificationResendClicked\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setVerificationResendTimeout\\\", [_dec30], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setVerificationResendTimeout\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setTimeoutCashierUrl\\\", [_dec31], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setTimeoutCashierUrl\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setTimeoutVerification\\\", [_dec32], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setTimeoutVerification\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"sendVerificationEmail\\\", [_dec33], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"sendVerificationEmail\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"resendVerificationEmail\\\", [_dec34], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"resendVerificationEmail\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setActiveTab\\\", [_dec35], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setActiveTab\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"onMountPaymentAgentList\\\", [_dec36], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"onMountPaymentAgentList\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"getPaymentAgentList\\\", [_dec37], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"getPaymentAgentList\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"addSupportedBank\\\", [_dec38], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"addSupportedBank\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"sortSupportedBanks\\\", [_dec39], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"sortSupportedBanks\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setPaymentAgentList\\\", [_dec40], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setPaymentAgentList\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"filterPaymentAgentList\\\", [_dec41], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"filterPaymentAgentList\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"onChangePaymentMethod\\\", [_dec42], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"onChangePaymentMethod\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"onMountPaymentAgentWithdraw\\\", [_dec43], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"onMountPaymentAgentWithdraw\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setIsWithdraw\\\", [_dec44], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setIsWithdraw\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setIsTryWithdrawSuccessful\\\", [_dec45], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setIsTryWithdrawSuccessful\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setIsWithdrawSuccessful\\\", [_dec46], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setIsWithdrawSuccessful\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setConfirmation\\\", [_dec47], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setConfirmation\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setReceipt\\\", [_dec48], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setReceipt\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"addPaymentAgent\\\", [_dec49], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"addPaymentAgent\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"requestTryPaymentAgentWithdraw\\\", [_dec50], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"requestTryPaymentAgentWithdraw\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"requestPaymentAgentWithdraw\\\", [_dec51], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"requestPaymentAgentWithdraw\\\"), _class13.prototype), _descriptor61 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"resetPaymentAgent\\\", [_dec52], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this15 = this;\\n\\n    return function () {\\n      _this15.setErrorMessage('');\\n\\n      _this15.setIsWithdraw(false);\\n\\n      _this15.clearVerification();\\n    };\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"onMountAccountTransfer\\\", [_dec53], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"onMountAccountTransfer\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setHasNoAccountsBalance\\\", [_dec54], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setHasNoAccountsBalance\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setHasNoAccount\\\", [_dec55], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setHasNoAccount\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setTransferFee\\\", [_dec56], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setTransferFee\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setMinimumFee\\\", [_dec57], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setMinimumFee\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setTransferLimit\\\", [_dec58], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setTransferLimit\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"sortAccountsTransfer\\\", [_dec59], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"sortAccountsTransfer\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setSelectedFrom\\\", [_dec60], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setSelectedFrom\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setSelectedTo\\\", [_dec61], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setSelectedTo\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setAccounts\\\", [_dec62], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setAccounts\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setIsTryTransferSuccessful\\\", [_dec63], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setIsTryTransferSuccessful\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setIsTransferConfirm\\\", [_dec64], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setIsTransferConfirm\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setAccountTransferAmount\\\", [_dec65], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setAccountTransferAmount\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setIsTransferSuccessful\\\", [_dec66], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setIsTransferSuccessful\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setIsMT5TransferInProgress\\\", [_dec67], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setIsMT5TransferInProgress\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"isMT5TransferInProgress\\\", [_dec68], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"isMT5TransferInProgress\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setReceiptTransfer\\\", [_dec69], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setReceiptTransfer\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"onChangeTransferFrom\\\", [_dec70], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"onChangeTransferFrom\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"onChangeTransferTo\\\", [_dec71], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"onChangeTransferTo\\\"), _class13.prototype), _descriptor62 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"resetAccountTransfer\\\", [_dec72], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this16 = this;\\n\\n    return /*#__PURE__*/cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {\\n      return regeneratorRuntime.wrap(function _callee21$(_context21) {\\n        while (1) {\\n          switch (_context21.prev = _context21.next) {\\n            case 0:\\n              _this16.setIsTransferSuccessful(false);\\n\\n            case 1:\\n            case \\\"end\\\":\\n              return _context21.stop();\\n          }\\n        }\\n      }, _callee21);\\n    }));\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"onMountPaymentAgentTransfer\\\", [_dec73], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"onMountPaymentAgentTransfer\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setIsPaymentAgent\\\", [_dec74], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setIsPaymentAgent\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setMinMaxPaymentAgentTransfer\\\", [_dec75], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setMinMaxPaymentAgentTransfer\\\"), _class13.prototype), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setConfirmationPaymentAgentTransfer\\\", [_dec76], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setConfirmationPaymentAgentTransfer\\\"), _class13.prototype), _descriptor63 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"requestTryPaymentAgentTransfer\\\", [_dec77], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this17 = this;\\n\\n    return /*#__PURE__*/function () {\\n      var _ref24 = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(_ref23) {\\n        var amount, currency, description, transfer_to, payment_agent_transfer;\\n        return regeneratorRuntime.wrap(function _callee22$(_context22) {\\n          while (1) {\\n            switch (_context22.prev = _context22.next) {\\n              case 0:\\n                amount = _ref23.amount, currency = _ref23.currency, description = _ref23.description, transfer_to = _ref23.transfer_to;\\n\\n                _this17.setErrorMessage('');\\n\\n                _context22.next = 4;\\n                return _this17.WS.authorized.paymentAgentTransfer({\\n                  amount: amount,\\n                  currency: currency,\\n                  description: description,\\n                  transfer_to: transfer_to,\\n                  dry_run: 1\\n                });\\n\\n              case 4:\\n                payment_agent_transfer = _context22.sent;\\n\\n                if (+payment_agent_transfer.paymentagent_transfer === 2) {\\n                  // show confirmation screen\\n                  _this17.setConfirmationPaymentAgentTransfer({\\n                    client_id: transfer_to,\\n                    client_name: payment_agent_transfer.client_to_full_name,\\n                    amount: amount,\\n                    description: description\\n                  });\\n\\n                  _this17.setIsTryTransferSuccessful(true);\\n                } else {\\n                  _this17.setErrorMessage(payment_agent_transfer.error, _this17.resetPaymentAgentTransfer);\\n                }\\n\\n                return _context22.abrupt(\\\"return\\\", payment_agent_transfer);\\n\\n              case 7:\\n              case \\\"end\\\":\\n                return _context22.stop();\\n            }\\n          }\\n        }, _callee22);\\n      }));\\n\\n      return function (_x9) {\\n        return _ref24.apply(this, arguments);\\n      };\\n    }();\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"setReceiptPaymentAgentTransfer\\\", [_dec78], Object.getOwnPropertyDescriptor(_class13.prototype, \\\"setReceiptPaymentAgentTransfer\\\"), _class13.prototype), _descriptor64 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"requestPaymentAgentTransfer\\\", [_dec79], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this18 = this;\\n\\n    return /*#__PURE__*/function () {\\n      var _ref26 = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(_ref25) {\\n        var amount, currency, description, transfer_to, payment_agent_transfer;\\n        return regeneratorRuntime.wrap(function _callee23$(_context23) {\\n          while (1) {\\n            switch (_context23.prev = _context23.next) {\\n              case 0:\\n                amount = _ref25.amount, currency = _ref25.currency, description = _ref25.description, transfer_to = _ref25.transfer_to;\\n\\n                _this18.setErrorMessage('');\\n\\n                _context23.next = 4;\\n                return _this18.WS.authorized.paymentAgentTransfer({\\n                  amount: amount,\\n                  currency: currency,\\n                  description: description,\\n                  transfer_to: transfer_to\\n                });\\n\\n              case 4:\\n                payment_agent_transfer = _context23.sent;\\n\\n                if (+payment_agent_transfer.paymentagent_transfer === 1) {\\n                  _this18.setReceiptPaymentAgentTransfer({\\n                    amount_transferred: amount,\\n                    client_id: transfer_to,\\n                    client_name: payment_agent_transfer.client_to_full_name\\n                  });\\n\\n                  _this18.setIsTransferSuccessful(true);\\n\\n                  _this18.setIsTryTransferSuccessful(false);\\n\\n                  _this18.setConfirmationPaymentAgentTransfer({});\\n                } else {\\n                  _this18.setErrorMessage(payment_agent_transfer.error, _this18.resetPaymentAgentTransfer);\\n                }\\n\\n                return _context23.abrupt(\\\"return\\\", payment_agent_transfer);\\n\\n              case 7:\\n              case \\\"end\\\":\\n                return _context23.stop();\\n            }\\n          }\\n        }, _callee23);\\n      }));\\n\\n      return function (_x10) {\\n        return _ref26.apply(this, arguments);\\n      };\\n    }();\\n  }\\n}), _descriptor65 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"resetPaymentAgentTransfer\\\", [_dec80], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this19 = this;\\n\\n    return function () {\\n      _this19.setIsTransferSuccessful(false);\\n\\n      _this19.setErrorMessage('');\\n    };\\n  }\\n})), _class13));\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./Stores/Cashier/cashier-store.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/factoryWithThrowingShims.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n\"use strict\";\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nvar ReactPropTypesSecret = __webpack_require__(\\\"../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\\\");\\n\\nfunction emptyFunction() {}\\nfunction emptyFunctionWithReset() {}\\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\\n\\nmodule.exports = function() {\\n  function shim(props, propName, componentName, location, propFullName, secret) {\\n    if (secret === ReactPropTypesSecret) {\\n      // It is still safe when called from React.\\n      return;\\n    }\\n    var err = new Error(\\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\\n      'Use PropTypes.checkPropTypes() to call them. ' +\\n      'Read more at http://fb.me/use-check-prop-types'\\n    );\\n    err.name = 'Invariant Violation';\\n    throw err;\\n  };\\n  shim.isRequired = shim;\\n  function getShim() {\\n    return shim;\\n  };\\n  // Important!\\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\\n  var ReactPropTypes = {\\n    array: shim,\\n    bool: shim,\\n    func: shim,\\n    number: shim,\\n    object: shim,\\n    string: shim,\\n    symbol: shim,\\n\\n    any: shim,\\n    arrayOf: getShim,\\n    element: shim,\\n    elementType: shim,\\n    instanceOf: getShim,\\n    node: shim,\\n    objectOf: getShim,\\n    oneOf: getShim,\\n    oneOfType: getShim,\\n    shape: getShim,\\n    exact: getShim,\\n\\n    checkPropTypes: emptyFunctionWithReset,\\n    resetWarningCache: emptyFunction\\n  };\\n\\n  ReactPropTypes.PropTypes = ReactPropTypes;\\n\\n  return ReactPropTypes;\\n};\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzP2RjMDciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/factoryWithThrowingShims.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/index.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\nif (false) { var throwOnDirectAccess, ReactIs; } else {\\n  // By explicitly using `prop-types` you are opting into new production behavior.\\n  // http://fb.me/prop-types-in-prod\\n  module.exports = __webpack_require__(\\\"../../../node_modules/prop-types/factoryWithThrowingShims.js\\\")();\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY2FzaGllci8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcz83MGQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\":\n/***/ ((module) => {\n\n\"use strict\";\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\\n\\nmodule.exports = ReactPropTypesSecret;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzP2FkODMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"mobx\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_mobx__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_406453__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(__webpack_module_cache__[moduleId]) {\n/******/ \t\t\treturn __webpack_module_cache__[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_406453__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_406453__.m = __webpack_modules__;\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_406453__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_406453__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/create fake namespace object */\n/******/ \t(() => {\n/******/ \t\tvar getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\n/******/ \t\tvar leafPrototypes;\n/******/ \t\t// create a fake namespace object\n/******/ \t\t// mode & 1: value is a module id, require it\n/******/ \t\t// mode & 2: merge all properties of value into the ns\n/******/ \t\t// mode & 4: return value when already ns object\n/******/ \t\t// mode & 16: return value when it's Promise-like\n/******/ \t\t// mode & 8|1: behave like require\n/******/ \t\t__nested_webpack_require_406453__.t = function(value, mode) {\n/******/ \t\t\tif(mode & 1) value = this(value);\n/******/ \t\t\tif(mode & 8) return value;\n/******/ \t\t\tif(typeof value === 'object' && value) {\n/******/ \t\t\t\tif((mode & 4) && value.__esModule) return value;\n/******/ \t\t\t\tif((mode & 16) && typeof value.then === 'function') return value;\n/******/ \t\t\t}\n/******/ \t\t\tvar ns = Object.create(null);\n/******/ \t\t\t__nested_webpack_require_406453__.r(ns);\n/******/ \t\t\tvar def = {};\n/******/ \t\t\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n/******/ \t\t\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n/******/ \t\t\t\tObject.getOwnPropertyNames(current).forEach(key => def[key] = () => value[key]);\n/******/ \t\t\t}\n/******/ \t\t\tdef['default'] = () => value;\n/******/ \t\t\t__nested_webpack_require_406453__.d(ns, def);\n/******/ \t\t\treturn ns;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_406453__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_406453__.o(definition, key) && !__nested_webpack_require_406453__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/ensure chunk */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_406453__.f = {};\n/******/ \t\t// This file contains only the entry chunk.\n/******/ \t\t// The chunk loading function for additional chunks\n/******/ \t\t__nested_webpack_require_406453__.e = (chunkId) => {\n/******/ \t\t\treturn Promise.all(Object.keys(__nested_webpack_require_406453__.f).reduce((promises, key) => {\n/******/ \t\t\t\t__nested_webpack_require_406453__.f[key](chunkId, promises);\n/******/ \t\t\t\treturn promises;\n/******/ \t\t\t}, []));\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get javascript chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference async chunks\n/******/ \t\t__nested_webpack_require_406453__.u = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn \"cashier/js/cashier.\" + chunkId + \".\" + \"2adf858974c0096d308f\" + \".js\";\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get mini-css chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference all chunks\n/******/ \t\t__nested_webpack_require_406453__.miniCssF = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn undefined;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_406453__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/load script */\n/******/ \t(() => {\n/******/ \t\tvar inProgress = {};\n/******/ \t\tvar dataWebpackPrefix = \"@deriv/cashier:\";\n/******/ \t\t// loadScript function to load a script via script tag\n/******/ \t\t__nested_webpack_require_406453__.l = (url, done, key, chunkId) => {\n/******/ \t\t\tif(inProgress[url]) { inProgress[url].push(done); return; }\n/******/ \t\t\tvar script, needAttach;\n/******/ \t\t\tif(key !== undefined) {\n/******/ \t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n/******/ \t\t\t\tfor(var i = 0; i < scripts.length; i++) {\n/******/ \t\t\t\t\tvar s = scripts[i];\n/******/ \t\t\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tif(!script) {\n/******/ \t\t\t\tneedAttach = true;\n/******/ \t\t\t\tscript = document.createElement('script');\n/******/ \t\t\n/******/ \t\t\t\tscript.charset = 'utf-8';\n/******/ \t\t\t\tscript.timeout = 120;\n/******/ \t\t\t\tif (__nested_webpack_require_406453__.nc) {\n/******/ \t\t\t\t\tscript.setAttribute(\"nonce\", __nested_webpack_require_406453__.nc);\n/******/ \t\t\t\t}\n/******/ \t\t\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n/******/ \t\t\t\tscript.src = url;\n/******/ \t\t\t}\n/******/ \t\t\tinProgress[url] = [done];\n/******/ \t\t\tvar onScriptComplete = (prev, event) => {\n/******/ \t\t\t\t// avoid mem leaks in IE.\n/******/ \t\t\t\tscript.onerror = script.onload = null;\n/******/ \t\t\t\tclearTimeout(timeout);\n/******/ \t\t\t\tvar doneFns = inProgress[url];\n/******/ \t\t\t\tdelete inProgress[url];\n/******/ \t\t\t\tscript.parentNode && script.parentNode.removeChild(script);\n/******/ \t\t\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n/******/ \t\t\t\tif(prev) return prev(event);\n/******/ \t\t\t}\n/******/ \t\t\t;\n/******/ \t\t\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n/******/ \t\t\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n/******/ \t\t\tscript.onload = onScriptComplete.bind(null, script.onload);\n/******/ \t\t\tneedAttach && document.head.appendChild(script);\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__nested_webpack_require_406453__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/publicPath */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_406453__.p = \"/\";\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/jsonp chunk loading */\n/******/ \t(() => {\n/******/ \t\t// no baseURI\n/******/ \t\t\n/******/ \t\t// object to store loaded and loading chunks\n/******/ \t\t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n/******/ \t\t// Promise = chunk loading, 0 = chunk loaded\n/******/ \t\tvar installedChunks = {\n/******/ \t\t\t\"cashier-store\": 0\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t\n/******/ \t\t__nested_webpack_require_406453__.f.j = (chunkId, promises) => {\n/******/ \t\t\t\t// JSONP chunk loading for javascript\n/******/ \t\t\t\tvar installedChunkData = __nested_webpack_require_406453__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n/******/ \t\t\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n/******/ \t\t\n/******/ \t\t\t\t\t// a Promise means \"currently loading\".\n/******/ \t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\tpromises.push(installedChunkData[2]);\n/******/ \t\t\t\t\t} else {\n/******/ \t\t\t\t\t\tif(true) { // all chunks have JS\n/******/ \t\t\t\t\t\t\t// setup Promise in chunk cache\n/******/ \t\t\t\t\t\t\tvar promise = new Promise((resolve, reject) => {\n/******/ \t\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n/******/ \t\t\t\t\t\t\t});\n/******/ \t\t\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n/******/ \t\t\n/******/ \t\t\t\t\t\t\t// start chunk loading\n/******/ \t\t\t\t\t\t\tvar url = __nested_webpack_require_406453__.p + __nested_webpack_require_406453__.u(chunkId);\n/******/ \t\t\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n/******/ \t\t\t\t\t\t\tvar error = new Error();\n/******/ \t\t\t\t\t\t\tvar loadingEnded = (event) => {\n/******/ \t\t\t\t\t\t\t\tif(__nested_webpack_require_406453__.o(installedChunks, chunkId)) {\n/******/ \t\t\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n/******/ \t\t\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n/******/ \t\t\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n/******/ \t\t\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n/******/ \t\t\t\t\t\t\t\t\t\terror.type = errorType;\n/******/ \t\t\t\t\t\t\t\t\t\terror.request = realSrc;\n/******/ \t\t\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n/******/ \t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t};\n/******/ \t\t\t\t\t\t\t__nested_webpack_require_406453__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n/******/ \t\t\t\t\t\t} else {}\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t// no prefetching\n/******/ \t\t\n/******/ \t\t// no preloaded\n/******/ \t\t\n/******/ \t\t// no HMR\n/******/ \t\t\n/******/ \t\t// no HMR manifest\n/******/ \t\t\n/******/ \t\t// no deferred startup\n/******/ \t\t\n/******/ \t\t// install a JSONP callback for chunk loading\n/******/ \t\tvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n/******/ \t\t\tvar [chunkIds, moreModules, runtime] = data;\n/******/ \t\t\t// add \"moreModules\" to the modules object,\n/******/ \t\t\t// then flag all \"chunkIds\" as loaded and fire callback\n/******/ \t\t\tvar moduleId, chunkId, i = 0, resolves = [];\n/******/ \t\t\tfor(;i < chunkIds.length; i++) {\n/******/ \t\t\t\tchunkId = chunkIds[i];\n/******/ \t\t\t\tif(__nested_webpack_require_406453__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n/******/ \t\t\t\t\tresolves.push(installedChunks[chunkId][0]);\n/******/ \t\t\t\t}\n/******/ \t\t\t\tinstalledChunks[chunkId] = 0;\n/******/ \t\t\t}\n/******/ \t\t\tfor(moduleId in moreModules) {\n/******/ \t\t\t\tif(__nested_webpack_require_406453__.o(moreModules, moduleId)) {\n/******/ \t\t\t\t\t__nested_webpack_require_406453__.m[moduleId] = moreModules[moduleId];\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tif(runtime) runtime(__nested_webpack_require_406453__);\n/******/ \t\t\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n/******/ \t\t\twhile(resolves.length) {\n/******/ \t\t\t\tresolves.shift()();\n/******/ \t\t\t}\n/******/ \t\t\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tvar chunkLoadingGlobal = self[\"webpackChunk_deriv_cashier\"] = self[\"webpackChunk_deriv_cashier\"] || [];\n/******/ \t\tchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\n/******/ \t\tchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n/******/ \t\t\n/******/ \t\t// no deferred startup\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __webpack_exports__ = __nested_webpack_require_406453__(\"./Stores/Cashier/cashier-store.js\");\n/******/ \t__webpack_exports__ = __webpack_exports__.default;\n/******/ \t\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../cashier/dist/cashier/js/cashier-store.js\n");

/***/ })

}]);